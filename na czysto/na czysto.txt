import sys
import os
from odbAccess import*
from textRepr import*
import datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.pagesizes import portrait
from reportlab.platypus import Image
from abaqus import session
import section
import regionToolset
import displayGroupMdbToolset as dgm
import part
import material
import assembly
import step
import interaction
import load
import mesh
import optimization
import job
import sketch
import visualization
import xyPlot
import displayGroupOdbToolset as dgo
import connectorBehavior
import time
from abaqusConstants import PNG
from abaqusConstants import UNDEFORMED
from abaqusConstants import FEATURE
from abaqusConstants import DEFORMED
from abaqusConstants import CONTOURS_ON_DEF
from abaqusConstants import COMPONENT
from abaqusConstants import INVARIANT

def executeFunction(fileName,generalCheck,mechanicalCheck,thermalCheck,elementSetsCheck,partsCheck,instancesCheck,sectionCategoriesCheck,sectionsCheck,
	showFramesCheck,showAllCheck,fromFrame,toFrame,showPlotsCheck,test,test2,frontTest,backTest,topTest,
	bottomTest,leftTest,rightTest,isoTest,destinationFileName,partsScreenshotCheck,test3):
	time1 = time.time()
	print " "
	print " "
	print " "
	odb = openOdb(fileName)
	global odb
	print "Exporting..."
	destinationFileName2 = destinationFileName
	global destinationFileName2

	stepList = parseToStep(test3)
	frameList = parseToFrames(test)
	viewList = parseToView(frontTest,backTest,topTest,bottomTest,leftTest,rightTest,isoTest)
	fieldOutputList = parseToFieldOutput(test2)
	

	listMaterials = odb.materials.keys()
	currentDate = datetime.datetime.now()
	stringList = []
	plotsNames = []
	stringList.append(getName(odb.name))
	stringList.append("Date: " + currentDate.strftime("%Y-%m-%d %H:%M"))
	stringList.append(" ")
	counter = 0.
	if generalCheck == 1 or mechanicalCheck == 1 or thermalCheck == 1:
		print "Materials progress:"
	for tmp in listMaterials:
		if generalCheck == 1 or mechanicalCheck == 1 or thermalCheck == 1:
			basicInfoFun(tmp,stringList)
			if generalCheck == 1:
				generalInfoFun(tmp,stringList)
			if mechanicalCheck == 1:
				mechanicalInfoFun(tmp,stringList)
			if thermalCheck == 1:
				thermalInfoFun(tmp,stringList)
			stringList.append(" ")
			counter += 1.
			progress = counter / float(len(listMaterials))
			print str(progress*100) + "%"
	if partsCheck == 1:
		partsInfoFun(stringList)
	if instancesCheck == 1:
		instancesInfoFun(stringList)
	if sectionsCheck == 1:
		sectionsInfoFun(stringList)
	if sectionCategoriesCheck == 1:
		sectionCategoriesInfoFun(stringList)
	if elementSetsCheck == 1:
		elementSetsInfoFun(stringList)
	if showFramesCheck == 1:
		if showAllCheck == "Show All":
			stepsInfoFun(stringList)
		else:
			stepsInfoFun2(stringList,fromFrame,toFrame)
	if showPlotsCheck == 1:
		plotsNames = plotFun(stringList)
	if partsScreenshotCheck == 1:
		makeScreenShotsOfParts(viewList)
	#if len(frameList) != 0:
	#	makeScreenShotsOfFieldOutputs(viewList,frameList,fieldOutputList,stepList)
	pdfName = destinationFileName + "\\" + getName(odb.name) + "\\" + getName(odb.name) + ".pdf"
	createDirectory(destinationFileName + "\\" + getName(odb.name))
	generatePDF(stringList,pdfName,partsScreenshotCheck,viewList,frameList,fieldOutputList,stepList,plotsNames)
	time2 = time.time()
	print "Execution time: " + str(time2 - time1) + "s"
########################################################################################################################## DONE
def basicInfoFun(material,list):
	try:
		test = odb.materials[material].name
		list.append("MATERIAL:")
		list.append("Name: " + odb.materials[material].name)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].description
		list.append("Description: " + odb.materials[material].description)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].materialIdentifier
		list.append("Material Identifier: " + odb.materials[material].materialIdentifier)
	except AttributeError:
		strangeVariable = 0
########################################################################################################################## DONE
def generalInfoFun(material,list):
	global destinationFileName2
	try:
		test = odb.materials[material].density.dependencies
		list.append("Density:")
		list.append("    Dependencies: " + str(odb.materials[material].density.dependencies))
		list.append("    Distribution Type: " + str(odb.materials[material].density.distributionType))
		list.append("    Field Name: " + odb.materials[material].density.fieldName)
		list.append("    Temperature dependency: " + str(odb.materials[material].density.temperatureDependency))
		list.append("    Table: " + str(odb.materials[material].density.table))
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\density"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].density.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].density.table),pathTmp + "\\" + odb.materials[material].name)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].depvar.deleteVar
		list.append("Depvar:")
		list.append("    Delete Var: " + str(odb.materials[material].depvar.deleteVar))
		list.append("    N: " + str(odb.materials[material].depvar.n))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].userMaterial.mechanicalConstants
		list.append("User Material:")
		list.append("    Mechanical Constants: " + "see in directory \"mechanicalConstants\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\mechanicalConstants"
		createDirectory(pathTmp)
		printTable2(odb.materials[material].userMaterial.mechanicalConstants,pathTmp + "\\" + odb.materials[material].name)
		list.append("    Thermal Constants: " + "see in directory \"thermalConstants\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\thermalConstants"
		createDirectory(pathTmp)
		printTable2(odb.materials[material].userMaterial.thermalConstants,pathTmp + "\\" + odb.materials[material].name)
		list.append("    Type: " + str(odb.materials[material].userMaterial.type))
		list.append("    Unsymm: " + str(odb.materials[material].userMaterial.unsymm))
	except AttributeError:
		strangeVariable = 0
########################################################################################################################## DONE
def mechanicalInfoFun(material,list):
	global destinationFileName2
	try:
		test = odb.materials[material].elastic.dependencies
		list.append("Elastic:")
		list.append("    Dependencies: " + str(odb.materials[material].elastic.dependencies))
		list.append("    Moduli: " + str(odb.materials[material].elastic.moduli))
		list.append("    No Compression: " + str(odb.materials[material].elastic.noCompression))
		list.append("    No Tension: " + str(odb.materials[material].elastic.noTension))
		list.append("    Temperature Dependency: " + str(odb.materials[material].elastic.temperatureDependency))
		list.append("    Type: " + str(odb.materials[material].elastic.type))
		list.append("    Table: " + "see in directory \"elastic\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\elastic"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].elastic.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].elastic.table),pathTmp + "\\" + odb.materials[material].name)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].plastic.dataType
		list.append("Plastic:")
		list.append("    Data Type: " + str(odb.materials[material].plastic.dataType))
		list.append("    Dependencies: " + str(odb.materials[material].plastic.dependencies))
		list.append("    Hardening: " + str(odb.materials[material].plastic.hardening))
		list.append("    Num Backstresses: " + str(odb.materials[material].plastic.numBackstresses))
		list.append("    Rate: " + str(odb.materials[material].plastic.rate))
		list.append("    Strain Range Dependency: " + str(odb.materials[material].plastic.strainRangeDependency))
		list.append("    Table: " + "see in directory \"plastic\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\plastic"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].plastic.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].plastic.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].plastic.temperatureDependency))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].porousMetalPlasticity.dependencies
		list.append("Porous Metal Plasticity:")
		list.append("    Dependencies: " + str(odb.materials[material].porousMetalPlasticity.dependencies))
		list.append("    Relative Density: " + str(odb.materials[material].porousMetalPlasticity.relativeDensity))
		list.append("    Table: " + "see in directory \"porousMetalPlasticity\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\porousMetalPlasticity"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].porousMetalPlasticity.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].porousMetalPlasticity.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].porousMetalPlasticity.temperatureDependency))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].ductileDamageInitiation.alpha
		list.append("Ductile Damage Initiation:")
		list.append("    Alpha: " + str(odb.materials[material].ductileDamageInitiation.alpha))
		try:
			test = odb.materials[material].ductileDamageInitiation.damageEvolution.degradation
			list.append("    Damage Evolution:")
			list.append("        Degradation: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.degradation))
			list.append("        Dependencies: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.dependencies))
			list.append("        Mixed Mode Behavior: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.mixedModeBehavior))
			list.append("        Mode Mix Ratio: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.modeMixRatio))
			list.append("        Power: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.power))
			list.append("        Softening: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.softening))
			list.append("        Table: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.table))
			pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\ductileDamageInitiation_damageEvolution"
			createDirectory(pathTmp)
			printTableToTXT(str(odb.materials[material].ductileDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			printTableToCSV(str(odb.materials[material].ductileDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			list.append("        Temperature Dependency: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.temperatureDependency))
			list.append("        Type: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.type))
		except AttributeError:
			strangeVariable = 0
		list.append("    Definition: " + str(odb.materials[material].ductileDamageInitiation.definition))
		list.append("    Dependencies: " + str(odb.materials[material].ductileDamageInitiation.dependencies))
		list.append("    Direction: " + str(odb.materials[material].ductileDamageInitiation.direction))
		list.append("    Feq: " + str(odb.materials[material].ductileDamageInitiation.feq))
		list.append("    Fnn: " + str(odb.materials[material].ductileDamageInitiation.fnn))
		list.append("    Fnt: " + str(odb.materials[material].ductileDamageInitiation.fnt))
		list.append("    Frequency: " + str(odb.materials[material].ductileDamageInitiation.frequency))
		list.append("    Ks: " + str(odb.materials[material].ductileDamageInitiation.ks))
		list.append("    Number Imperfections: " + str(odb.materials[material].ductileDamageInitiation.numberImperfections))
		list.append("    Omega: " + str(odb.materials[material].ductileDamageInitiation.omega))
		list.append("    Table: " + "see in directory \"ductileDamageInitiation_table\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\ductileDamageInitiation_table"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].ductileDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].ductileDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].ductileDamageInitiation.temperatureDependency))
		list.append("    Tolerance: " + str(odb.materials[material].ductileDamageInitiation.tolerance))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].maxsDamageInitiation.alpha
		list.append("Maxs Damage Initiation:")
		list.append("    Alpha: " + str(odb.materials[material].maxsDamageInitiation.alpha))
		try:
			test = odb.materials[material].maxsDamageInitiation.damageEvolution.degradation
			list.append("    Damage Evolution:")
			list.append("        Degradation: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.degradation))
			list.append("        Dependencies: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.dependencies))
			list.append("        Mixed Mode Behavior: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.mixedModeBehavior))
			list.append("        Mode Mix Ratio: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.modeMixRatio))
			list.append("        Power: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.power))
			list.append("        Softening: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.softening))
			list.append("        Table: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.table))
			pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\maxsDamageInitiation_damageEvolution"
			createDirectory(pathTmp)
			printTableToTXT(str(odb.materials[material].maxsDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			printTableToCSV(str(odb.materials[material].maxsDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			list.append("        Temperature Dependency: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.temperatureDependency))
			list.append("        Type: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.type))
		except AttributeError:
			strangeVariable = 0
		list.append("    Definition: " + str(odb.materials[material].maxsDamageInitiation.definition))
		list.append("    Dependencies: " + str(odb.materials[material].maxsDamageInitiation.dependencies))
		list.append("    Direction: " + str(odb.materials[material].maxsDamageInitiation.direction))
		list.append("    Feq: " + str(odb.materials[material].maxsDamageInitiation.feq))
		list.append("    Fnn: " + str(odb.materials[material].maxsDamageInitiation.fnn))
		list.append("    Fnt: " + str(odb.materials[material].maxsDamageInitiation.fnt))
		list.append("    Frequency: " + str(odb.materials[material].maxsDamageInitiation.frequency))
		list.append("    Ks: " + str(odb.materials[material].maxsDamageInitiation.ks))
		list.append("    Number Imperfections: " + str(odb.materials[material].maxsDamageInitiation.numberImperfections))
		list.append("    Omega: " + str(odb.materials[material].maxsDamageInitiation.omega))
		list.append("    Table: " + "see in directory \"maxsDamageInitiation_table\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\maxsDamageInitiation_table"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].maxsDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].maxsDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].maxsDamageInitiation.temperatureDependency))
		list.append("    Tolerance: " + str(odb.materials[material].maxsDamageInitiation.tolerance))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].maxpsDamageInitiation.alpha
		list.append("Maxps Damage Initiation:")
		list.append("    Alpha: " + str(odb.materials[material].maxpsDamageInitiation.alpha))
		try:
			test = odb.materials[material].maxpsDamageInitiation.damageEvolution.degradation
			list.append("    Damage Evolution:")
			list.append("        Degradation: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.degradation))
			list.append("        Dependencies: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.dependencies))
			list.append("        Mixed Mode Behavior: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.mixedModeBehavior))
			list.append("        Mode Mix Ratio: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.modeMixRatio))
			list.append("        Power: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.power))
			list.append("        Softening: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.softening))
			list.append("        Table: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.table))
			pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\maxpsDamageInitiation_damageEvolution"
			createDirectory(pathTmp)
			printTableToTXT(str(odb.materials[material].maxpsDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			printTableToCSV(str(odb.materials[material].maxpsDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			list.append("        Temperature Dependency: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.temperatureDependency))
			list.append("        Type: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.type))
		except AttributeError:
			strangeVariable = 0
		list.append("    Definition: " + str(odb.materials[material].maxpsDamageInitiation.definition))
		list.append("    Dependencies: " + str(odb.materials[material].maxpsDamageInitiation.dependencies))
		list.append("    Direction: " + str(odb.materials[material].maxpsDamageInitiation.direction))
		list.append("    Feq: " + str(odb.materials[material].maxpsDamageInitiation.feq))
		list.append("    Fnn: " + str(odb.materials[material].maxpsDamageInitiation.fnn))
		list.append("    Fnt: " + str(odb.materials[material].maxpsDamageInitiation.fnt))
		list.append("    Frequency: " + str(odb.materials[material].maxpsDamageInitiation.frequency))
		list.append("    Ks: " + str(odb.materials[material].maxpsDamageInitiation.ks))
		list.append("    Number Imperfections: " + str(odb.materials[material].maxpsDamageInitiation.numberImperfections))
		list.append("    Omega: " + str(odb.materials[material].maxpsDamageInitiation.omega))
		list.append("    Table: " + "see in directory \"maxpsDamageInitiation_table\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\maxpsDamageInitiation_table"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].maxpsDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].maxpsDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].maxpsDamageInitiation.temperatureDependency))
		list.append("    Tolerance: " + str(odb.materials[material].maxpsDamageInitiation.tolerance))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].johnsonCookDamageInitiation.alpha
		list.append("Johnson Cook DamageInitiation:")
		list.append("    Alpha: " + str(odb.materials[material].johnsonCookDamageInitiation.alpha))
		try:
			test = odb.materials[material].johnsonCookDamageInitiation.damageEvolution.degradation
			list.append("    Damage Evolution:")
			list.append("        Degradation: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.degradation))
			list.append("        Dependencies: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.dependencies))
			list.append("        Mixed Mode Behavior: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.mixedModeBehavior))
			list.append("        Mode Mix Ratio: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.modeMixRatio))
			list.append("        Power: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.power))
			list.append("        Softening: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.softening))
			list.append("        Table: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.table))
			pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\johnsonCookDamageInitiation_damageEvolution"
			createDirectory(pathTmp)
			printTableToTXT(str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			printTableToCSV(str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			list.append("        Temperature Dependency: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.temperatureDependency))
			list.append("        Type: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.type))
		except AttributeError:
			strangeVariable = 0
		list.append("    Definition: " + str(odb.materials[material].johnsonCookDamageInitiation.definition))
		list.append("    Dependencies: " + str(odb.materials[material].johnsonCookDamageInitiation.dependencies))
		list.append("    Direction: " + str(odb.materials[material].johnsonCookDamageInitiation.direction))
		list.append("    Feq: " + str(odb.materials[material].johnsonCookDamageInitiation.feq))
		list.append("    Fnn: " + str(odb.materials[material].johnsonCookDamageInitiation.fnn))
		list.append("    Fnt: " + str(odb.materials[material].johnsonCookDamageInitiation.fnt))
		list.append("    Frequency: " + str(odb.materials[material].johnsonCookDamageInitiation.frequency))
		list.append("    Ks: " + str(odb.materials[material].johnsonCookDamageInitiation.ks))
		list.append("    Number Imperfections: " + str(odb.materials[material].johnsonCookDamageInitiation.numberImperfections))
		list.append("    Omega: " + str(odb.materials[material].johnsonCookDamageInitiation.omega))
		list.append("    Table: " + "see in directory \"johnsonCookDamageInitiation_table\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\johnsonCookDamageInitiation_table"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].johnsonCookDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].johnsonCookDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].johnsonCookDamageInitiation.temperatureDependency))
		list.append("    Tolerance: " + str(odb.materials[material].johnsonCookDamageInitiation.tolerance))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].eos.dependencies
		list.append("Eos:")
		list.append("    Dependencies: " + str(odb.materials[material].eos.dependencies))
		list.append("    Detonation Energy: " + str(odb.materials[material].eos.detonationEnergy))
		try:
			test = odb.materials[material].eos.detonationPoint.table
			list.append("    Detonation Point: ")
			list.append("        Table: " + str(odb.materials[material].eos.detonationPoint.table))
		except AttributeError:
			strangeVariable = 0
		list.append("    Gas Specific Table: " + "see in directory \"eos_gasSpecificTable\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\eos_gasSpecificTable"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].eos.gasSpecificTable),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].eos.gasSpecificTable),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Gas Table: " + "see in directory \"eos_gasTable\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\eos_gasTable"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].eos.gasTable),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].eos.gasTable),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Reaction Table: " + "see in directory \"eos_reactionTable\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\eos_reactionTable"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].eos.reactionTable),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].eos.reactionTable),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Solid Table: " + "see in directory \"eos_solidTable\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\eos_solidTable"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].eos.solidTable),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].eos.solidTable),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Table: " + "see in directory \"eos_table\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\eos_table"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].eos.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].eos.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].eos.temperatureDependency))
		list.append("    Type: " + str(odb.materials[material].eos.type))
	except AttributeError:
		strangeVariable = 0

########################################################################################################################## DONE
def thermalInfoFun(material,list):
	global destinationFileName2
	try:
		test = odb.materials[material].conductivity.dependencies
		list.append("Conductivity:")
		list.append("    Dependencies: " + str(odb.materials[material].conductivity.dependencies))
		list.append("    Table: " + str(odb.materials[material].conductivity.table))
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\conductivity"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].conductivity.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].conductivity.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].conductivity.temperatureDependency))
		list.append("    Type: " + str(odb.materials[material].conductivity.type))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].inelasticHeatFraction.fraction
		list.append("Inelastic Heat Fraction:")
		list.append("    Fraction: " + str(odb.materials[material].inelasticHeatFraction.fraction))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].specificHeat.dependencies
		list.append("Specific Heat:")
		list.append("    Dependencies: " + str(odb.materials[material].specificHeat.dependencies))
		list.append("    Law: " + str(odb.materials[material].specificHeat.law))
		list.append("    Table: " + str(odb.materials[material].specificHeat.table))
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\specificHeat"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].specificHeat.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].specificHeat.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].specificHeat.temperatureDependency))
	except AttributeError:
		strangeVariable = 0
########################################################################################################################## DONE
def elementSetsInfoFun(list2):
	list = odb.rootAssembly.elementSets.keys()
	counter = 0.
	print "Sets progress:"
	for tmp in list:
		try:
			test = odb.rootAssembly.elementSets[tmp].name
			list2.append("ELEMENT SET: ")
			list2.append("Name: " + odb.rootAssembly.elementSets[tmp].name)
			list2.append("Instance Names: " + str(odb.rootAssembly.elementSets[tmp].instanceNames))
			list2.append("Is Internal: " + str(odb.rootAssembly.elementSets[tmp].isInternal))
			list2.append("Nodes: " + str(odb.rootAssembly.elementSets[tmp].nodes))
			list2.append(" ")
		except AttributeError:
			strangeVariable = 0
		counter += 1.
		progress = counter / float(len(list))
		print str(progress*100) + "%"
########################################################################################################################## DONE
def partsInfoFun(list2):
	list = odb.parts.keys()
	counter = 0.
	print "Parts progress:"
	for tmp in list:
		try:
			test = odb.parts[tmp].name
			list2.append("PART:")
			list2.append("Name: " + odb.parts[tmp].name)
			list2.append("Analytic Surface: " + str(odb.parts[tmp].analyticSurface))
			list2.append("Embedded Space: " + str(odb.parts[tmp].embeddedSpace))
			list2.append("Type: " + str(odb.parts[tmp].type))
			list2.append(" ")
		except AttributeError:
			strangeVariable = 0
		counter += 1.
		progress = counter / float(len(list))
		print str(progress*100) + "%"
########################################################################################################################## DONE
def instancesInfoFun(listTmp):
	list = odb.rootAssembly.instances.keys()
	counter = 0.
	print "Instances progress:"
	for tmp in list:
		try:
			test = odb.rootAssembly.instances[tmp].name
			listTmp.append("INSTANCE: ")
			listTmp.append("Name: " + odb.rootAssembly.instances[tmp].name)
			listTmp.append("Analytic Surface: " + str(odb.rootAssembly.instances[tmp].analyticSurface))
			listTmp.append("Embedded Space: " + str(odb.rootAssembly.instances[tmp].embeddedSpace))
			listTmp.append("Type: " + str(odb.rootAssembly.instances[tmp].type))
			list2 = odb.rootAssembly.instances[tmp].elementSets.keys()
			for tmp2 in list2:		
				try:
					test = odb.rootAssembly.instances[tmp].elementSets[tmp2].name
					listTmp.append("ELEMENT SET:")
					listTmp.append("    Name: " + odb.rootAssembly.instances[tmp].elementSets[tmp2].name)
					listTmp.append("    Faces: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].faces))
					listTmp.append("    Instance Names: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].instanceNames))
					listTmp.append("    Instances: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].instances))
					listTmp.append("    Is Internal: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].isInternal))
					listTmp.append("    Nodes: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].nodes))
				except AttributeError:
					strangeVariable = 0
			number = len(odb.rootAssembly.instances[tmp].sectionAssignments)
			for number in range(number):
				try:
					test = odb.rootAssembly.instances[tmp].sectionAssignments[number].sectionName
					listTmp.append("SECTION ASSIGMENT:")
					listTmp.append("    Section Name: " + odb.rootAssembly.instances[tmp].sectionAssignments[number].sectionName)
					listTmp.append("    Offset: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].offset))
					try:
						test = odb.rootAssembly.instances[tmp].sectionAssignments[number].region.name
						listTmp.append("    REGION: ")
						listTmp.append("        Name: " + odb.rootAssembly.instances[tmp].sectionAssignments[number].region.name)
						listTmp.append("        Faces: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.faces))
						listTmp.append("        Instance Names: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.instanceNames))
						listTmp.append("        Instances: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.instances))
						listTmp.append("        Is Internal: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.isInternal))
						listTmp.append("        Nodes: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.nodes))
					except AttributeError:
						strangeVariable = 0
				except AttributeError:
					strangeVariable = 0
			listTmp.append(" ")
		except AttributeError:
			strangeVariable = 0
		counter += 1.
		progress = counter / float(len(list))
		print str(progress*100) + "%"
########################################################################################################################## DONE
def sectionCategoriesInfoFun(list2):
	list = odb.sectionCategories.keys()
	counter = 0.
	print "Section Caregories progress:"
	for tmp in list:
		try:
			test = odb.sectionCategories[tmp].name
			list2.append("SECTION CATEGORY:")
			list2.append("Name: " + odb.sectionCategories[tmp].name)
			list2.append("Description: " + str(odb.sectionCategories[tmp].description))
			list2.append(" ")
		except AttributeError:
			strangeVariable = 0
		counter += 1.
		progress = counter / float(len(list))
		print str(progress*100) + "%"
########################################################################################################################## DONE
def sectionsInfoFun(list2):
	list = odb.sections.keys()
	counter = 0.
	print "Sections progress:"
	for tmp in list:
		try:
			test2 = odb.sections[tmp].name
			list2.append("SECTION:")
			list2.append("Name: " + odb.sections[tmp].name)
			list2.append("Material: " + str(odb.sections[tmp].material))
			list2.append("Thickness: " + str(odb.sections[tmp].thickness))
			list2.append(" ")
		except AttributeError:
			strangeVariable = 0
		counter += 1.
		progress = counter / float(len(list))
		print str(progress*100) + "%"
##########################################################################################################################
def generatePDF(list,name,partsScreenshotCheck,viewList,frameList,fieldOutputList,stepList,plotsNames = []):
	pageNumber = 1
	beggining = 50
	fontSize = 14
	newLine = fontSize + 4
	plotCounter = 0
	c = canvas.Canvas(name,pagesize=portrait(A4),bottomup=0)
	c.setFont('Helvetica',fontSize, leading=None)
	for tmp in range(len(list)):
		if beggining >= 765:
			c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
			pageNumber += 1
			c.showPage()
			beggining = 50
			c.setFont('Helvetica',fontSize, leading=None)
		c.drawString(50,beggining,list[tmp])
		beggining += newLine
	c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
	c.showPage()
	for tmp in range(0,len(plotsNames),2):
		c.setFont('Helvetica',fontSize, leading=None)
		pageNumber += 1
		c.saveState()
		c.translate(0,300)
		c.scale(1,-1)
		c.drawImage(destinationFileName2 + "\\" + getName(odb.name) + "\\plots\\" + plotsNames[tmp] + ".jpg",0,0,A4[0],300)
		plotCounter += 1
		c.restoreState()
		if plotCounter == len(plotsNames):
			c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
			c.showPage()
			break
		c.saveState()
		c.translate(0,600)
		c.scale(1,-1)
		c.drawImage(destinationFileName2 + "\\" + getName(odb.name) + "\\plots\\" + plotsNames[tmp+1] + ".jpg",0,0,A4[0],300)
		plotCounter += 1
		c.restoreState()
		c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
		c.showPage()
	if partsScreenshotCheck == 1:
		partList = odb.rootAssembly.instances.keys()
		partList.insert(0,"All")
		for tmp in range(0,len(partList)):
			viewCounter = 0
			c.setFont('Helvetica',fontSize, leading=None)
			for tmp2 in range(0,len(viewList),2):
				c.setFont('Helvetica',fontSize, leading=None)
				pageNumber += 1
				c.saveState()
				c.translate(0,320)
				c.scale(1,-1)
				c.drawImage(destinationFileName2 + "\\" + getName(odb.name) + "\\part\\" + viewList[tmp2] + "\\" + partList[tmp] + ".jpg",0,0,A4[0],300)
				c.restoreState()
				c.drawCentredString(270,20,partList[tmp])
				viewCounter += 1
				if viewCounter == len(viewList):
					c.setFont('Helvetica',fontSize, leading=None)
					c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
					c.showPage()
					break
				c.saveState()
				c.translate(0,660)
				c.scale(1,-1)
				c.drawImage(destinationFileName2 + "\\" + getName(odb.name) + "\\part\\" + viewList[tmp2+1] + "\\" + partList[tmp] + ".jpg",0,0,A4[0],300)
				c.restoreState()
				c.drawCentredString(270,340,partList[tmp+1])
				viewCounter += 1
				c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
				c.showPage()
	if len(stepList) != 0:
		partList = odb.rootAssembly.instances.keys()
		partList.insert(0,"All")
		for tmp in stepList:
			step = odb.steps[tmp]
			for tmp2 in frameList:
				frame = step.frames[tmp2]
				for tmp3 in fieldOutputList:
					if len(frame.fieldOutputs[tmp3].componentLabels) == 0 and len(frame.fieldOutputs[tmp3].validInvariants) == 0:
						viewCounter = 0
						for view in viewList:
							for part in range(0,len(partList),2):
								c.setFont('Helvetica',fontSize, leading=None)
								pageNumber += 1
								c.saveState()
								c.translate(0,320)
								c.scale(1,-1)
								c.drawImage(destinationFileName2+"\\"+getName(odb.name)+"\\fieldOutputs\\"+tmp+"\\"+str(tmp2)+"\\"+tmp3+"\\"+view+"\\"+partList[part]+".jpg",0,0,A4[0],300)
								c.restoreState()
								c.drawCentredString(270,20,partList[part])
								viewCounter += 1
								if viewCounter == len(partList):
									c.setFont('Helvetica',fontSize, leading=None)
									c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
									c.showPage()
									break
								c.saveState()
								c.translate(0,660)
								c.scale(1,-1)
								c.drawImage(destinationFileName2+"\\"+getName(odb.name)+"\\fieldOutputs\\"+tmp+"\\"+str(tmp2)+"\\"+tmp3+"\\"+view+"\\"+partList[part+1]+".jpg",0,0,A4[0],300)
								c.restoreState()
								c.drawCentredString(270,340,partList[part+1])
								viewCounter += 1
								c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
								c.showPage()
					componentList = frame.fieldOutputs[tmp3].componentLabels
					for component in componentList:
						viewCounter = 0
						for view in viewList:
							for part in range(0,len(partList),2):
								c.setFont('Helvetica',fontSize, leading=None)
								pageNumber += 1
								c.saveState()
								c.translate(0,320)
								c.scale(1,-1)
								c.drawImage(destinationFileName2+"\\"+getName(odb.name)+"\\fieldOutputs\\"+tmp+"\\"+str(tmp2)+"\\"+tmp3+"\\"+component+"\\"+view+"\\"+partList[part]+".jpg",0,0,A4[0],300)
								c.restoreState()
								c.drawCentredString(270,20,partList[part])
								viewCounter += 1
								if viewCounter == len(partList):
									c.setFont('Helvetica',fontSize, leading=None)
									c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
									c.showPage()
									break
								c.saveState()
								c.translate(0,660)
								c.scale(1,-1)
								c.drawImage(destinationFileName2+"\\"+getName(odb.name)+"\\fieldOutputs\\"+tmp+"\\"+str(tmp2)+"\\"+tmp3+"\\"+component+"\\"+view+"\\"+partList[part+1]+".jpg",0,0,A4[0],300)
								c.restoreState()
								c.drawCentredString(270,340,partList[part+1])
								viewCounter += 1
								c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
								c.showPage()
						
	c.save()
	print "Exported to " + name
########################################################################################################################## DONE
def getName(string):
	length = len(string)
	tmp = ""
	for i in range(length-1,0,-1):
		if string[i] == "/":
			for j in range(i+1,length-4):
				tmp += string[j]
			break
	return tmp
########################################################################################################################## DONE
def printTable(table,list):
	counter = 0
	left = 0
	right = 0
	tmp = ""
	while (counter < len(table) - 2):
		counter += 1
		if table[counter] == "(":
			left = counter
		if table[counter] == ")":
			right = counter
			for i in range(left + 1,right):
				tmp += table[i]
			list.append(tmp)
			tmp = ""
########################################################################################################################## DONE
def printTable2(table,name):
	file = open(name+".txt","w")
	file2 = open(name+".csv","w")
	for tmp in range(len(table)):
		file.write(str(table[tmp])+"\n")
		file2.write(str(table[tmp])+"\n")
	file.close()
	file2.close()
########################################################################################################################## DONE
def printTableToTXT(table,name):
	counter = 0
	left = 0
	right = 0
	tmp = ""
	file = open(name+".txt","w")
	while (counter < len(table) - 2):
		counter += 1
		if table[counter] == "(":
			left = counter
		if table[counter] == ")":
			right = counter
			for i in range(left + 1,right):
				tmp += table[i]
			tmp+="\n"
			file.write(tmp)
			tmp = ""	
	file.close()
########################################################################################################################## DONE
def printTableToCSV(table,name):
	counter = 0
	left = 0
	right = 0
	tmp = ""
	file = open(name+".csv","w")
	while (counter < len(table) - 2):
		counter += 1
		if table[counter] == "(":
			left = counter
		if table[counter] == ")":
			right = counter
			for i in range(left + 1,right):
				tmp += table[i]
			tmp+="\n"
			file.write(tmp)
			tmp = ""	
	file.close()
########################################################################################################################## DONE
def createDirectory(path):
	if not os.path.exists(path):
		os.makedirs(path)
########################################################################################################################## DONE
def stepsInfoFun(stringList):
	counter = 0.
	list = odb.steps.keys()
	for tmp in list:
		try:
			stepData = odb.steps[tmp]
			test = stepData.name
			stringList.append("STEP:")
			stringList.append("Name: " + stepData.name)
			stringList.append("Acoustic Mass: " + str(stepData.acousticMass))
			stringList.append("Acoustic Mass Center: " + str(stepData.acousticMassCenter))
			stringList.append("Description: " + str(stepData.description))
			stringList.append("Domain: " + str(stepData.domain))
			stringList.append("Procedure: " + str(stepData.procedure))
			stringList.append("Retained Eigen Modes: " + str(stepData.retainedEigenModes))
			stringList.append("Time Period: " + str(stepData.timePeriod))
			stringList.append("Total Time: " + str(stepData.totalTime))
			print "Step progress:"
			try:
				for tmp2 in range(len(stepData.frames)):
					frameData = stepData.frames[tmp2]
					stringList.append("FRAME")
					stringList.append("    Frame Id: " + str(frameData.frameId))
					stringList.append("    Description: " + str(frameData.description))
					stringList.append("    Associated Frame: " + str(frameData.associatedFrame))
					stringList.append("    Cyclic Mode Number: " + str(frameData.cyclicModeNumber))
					stringList.append("    Domain: " + str(frameData.domain))
					stringList.append("    Frame Value: " + str(frameData.frameValue))
					stringList.append("    Frequency: " + str(frameData.frequency))
					stringList.append("    Increment Number: " + str(frameData.incrementNumber))
					stringList.append("    Is Imaginary: " + str(frameData.isImaginary))
					stringList.append("    Load Case: " + str(frameData.loadCase))
					stringList.append("    Mode: " + str(frameData.mode))
					try:
						list3 = frameData.fieldOutputs.keys()
						for tmp3 in list3:
							fieldData = frameData.fieldOutputs[tmp3]
							test = fieldData.name
							stringList.append("    FIELD OUTPUT:")
							stringList.append("        Name: " + fieldData.name)
							stringList.append("        Base Element Types: " + str(fieldData.baseElementTypes))
							stringList.append("        Component Labels: " + str(fieldData.componentLabels))
							stringList.append("        Description: " + str(fieldData.description))
							stringList.append("        Is Complex: " + str(fieldData.isComplex))
							stringList.append("        Type: " + str(fieldData.type))
							stringList.append("        Valid Invariants: " + str(fieldData.validInvariants))
					except AttributeError:
						strangeVariable = 0
					counter += 1.
					progress =  counter / float(len(stepData.frames))
					print str(progress*100.) + "%"
			except AttributeError:
				strangeVariable = 0
			stringList.append(" ")
			counter = 0.
		except AttributeError:
			strangeVariable = 0
########################################################################################################################## DONE
def stepsInfoFun2(stringList,fromFrame,toFrame):
	counter = 0.
	list = odb.steps.keys()
	for tmp in list:
		try:
			stepData = odb.steps[tmp]
			test = stepData.name
			stringList.append("STEP:")
			stringList.append("Name: " + stepData.name)
			stringList.append("Acoustic Mass: " + str(stepData.acousticMass))
			stringList.append("Acoustic Mass Center: " + str(stepData.acousticMassCenter))
			stringList.append("Description: " + str(stepData.description))
			stringList.append("Domain: " + str(stepData.domain))
			stringList.append("Procedure: " + str(stepData.procedure))
			stringList.append("Retained Eigen Modes: " + str(stepData.retainedEigenModes))
			stringList.append("Time Period: " + str(stepData.timePeriod))
			stringList.append("Total Time: " + str(stepData.totalTime))
			print "Step progress:"
			try:
				for tmp2 in range(fromFrame,toFrame+1):
					frameData = stepData.frames[tmp2]
					stringList.append("FRAME")
					stringList.append("    Frame Id: " + str(frameData.frameId))
					stringList.append("    Description: " + str(frameData.description))
					stringList.append("    Associated Frame: " + str(frameData.associatedFrame))
					stringList.append("    Cyclic Mode Number: " + str(frameData.cyclicModeNumber))
					stringList.append("    Domain: " + str(frameData.domain))
					stringList.append("    Frame Value: " + str(frameData.frameValue))
					stringList.append("    Frequency: " + str(frameData.frequency))
					stringList.append("    Increment Number: " + str(frameData.incrementNumber))
					stringList.append("    Is Imaginary: " + str(frameData.isImaginary))
					stringList.append("    Load Case: " + str(frameData.loadCase))
					stringList.append("    Mode: " + str(frameData.mode))
					try:
						list3 = odb.steps[tmp].frames[tmp2].fieldOutputs.keys()
						for tmp3 in list3:
							fieldData = frameData.fieldOutputs[tmp3]
							test = fieldData.name
							stringList.append("    FIELD OUTPUT:")
							stringList.append("        Name: " + fieldData.name)
							stringList.append("        Base Element Types: " + str(fieldData.baseElementTypes))
							stringList.append("        Component Labels: " + str(fieldData.componentLabels))
							stringList.append("        Description: " + str(fieldData.description))
							stringList.append("        Is Complex: " + str(fieldData.isComplex))
							stringList.append("        Type: " + str(fieldData.type))
							stringList.append("        Valid Invariants: " + str(fieldData.validInvariants))
					except AttributeError:
						strangeVariable = 0
					counter += 1.
					progress =  counter / float(toFrame+1)
					print str(progress*100.) + "%"
			except AttributeError:
				strangeVariable = 0
			stringList.append(" ")
			counter = 0.
		except AttributeError:
			strangeVariable = 0
########################################################################################################################## DONE
def viewPlot(plot,odbName):
	odb = session.odbs[odbName]
	xy1 = xyPlot.XYDataFromHistory(odb=odb, 
		outputVariableName=plot, 
		suppressQuery=True, __linkedVpName__='Viewport: 1')
	c1 = session.Curve(xyData=xy1)
	xyp = session.xyPlots['XYPlot-1']
	chartName = xyp.charts.keys()[0]
	chart = xyp.charts[chartName]
	chart.setValues(curvesToPlot=(c1, ), )
	session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
########################################################################################################################## DONE
def viewPlot2(plot,odbName):
	o7 = session.odbs[odbName]
	session.viewports['Viewport: 1'].setValues(displayedObject=o7)
	odb = session.odbs[odbName]
	xy1 = xyPlot.XYDataFromHistory(odb=odb, 
		outputVariableName=plot, 
		suppressQuery=True, __linkedVpName__='Viewport: 1')
	c1 = session.Curve(xyData=xy1)
	xyp = session.XYPlot('XYPlot-1')
	chartName = xyp.charts.keys()[0]
	chart = xyp.charts[chartName]
	chart.setValues(curvesToPlot=(c1, ), )
	session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
	session.mdbData.summary()
########################################################################################################################## DONE
def makeScreenshot(path):
	session.printToFile(fileName=path, format=PNG, canvasObjects=(session.viewports['Viewport: 1'], ))
########################################################################################################################## DONE
def plotFun(stringList):
	list = odb.steps.keys()
	odbNameTmp = odb.name
	
	path = path = destinationFileName2 + "\\" + getName(odb.name) + "\\plotsData\\"
	createDirectory(destinationFileName2 + "\\" + getName(odb.name) + "\\plots")
	createDirectory(destinationFileName2 + "\\" + getName(odb.name) + "\\plotsData\\")
	plotsList = []
	plotsNames = []
	for tmp in list:
		try:
			test = odb.steps[tmp].name
			stringList.append("PLOTS:")
			stringList.append("STEP: ")
			stringList.append(odb.steps[tmp].name)
			list2 = odb.steps[tmp].historyRegions.keys()
			for tmp2 in list2:
				try:
					test = odb.steps[tmp].historyRegions[tmp2].name
					stringList.append("HISTORY REGIONS:")
					stringList.append(odb.steps[tmp].historyRegions[tmp2].name)
					list3 = odb.steps[tmp].historyRegions[tmp2].historyOutputs.keys()
					for tmp3 in list3:
						try:
							test = odb.steps[tmp].historyRegions[tmp2].historyOutputs[tmp3].name
							tmpString = str(odb.steps[tmp].historyRegions[tmp2].historyOutputs[tmp3].description)
							tmpString += ": "
							tmpString += str(odb.steps[tmp].historyRegions[tmp2].historyOutputs[tmp3].name)
							tmpString += " for Whole Model" ###EWENTUALNIE DO ZMIANY JAK SIE OKAZE ZE JEST WIECEJ
							plotsList.append(tmpString)
							plotsNames.append(odb.steps[tmp].historyRegions[tmp2].historyOutputs[tmp3].name)
							stringList.append("    " + tmpString)
							printTableToTXT(str(odb.steps[tmp].historyRegions[tmp2].historyOutputs[tmp3].data),path+odb.steps[tmp].historyRegions[tmp2].historyOutputs[tmp3].name)
							printTableToCSV(str(odb.steps[tmp].historyRegions[tmp2].historyOutputs[tmp3].data),path+odb.steps[tmp].historyRegions[tmp2].historyOutputs[tmp3].name)
						except AttributeError:
							strangeVariable = 0
				except AttributeError:
					strangeVariable = 0
			stringList.append(" ")
		except AttributeError:
			strangeVariable = 0

	if len(plotsList) != 0:
		if len(session.xyPlots) > 0:
			counter = 0.
			print "Plots progress:"
			for tmp in range(0,len(plotsList)):
				pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\plots\\" + plotsNames[tmp]
				viewPlot(plotsList[tmp],odbNameTmp)
				makeScreenshot(pathTmp)
				counter += 1.
				progress = counter / float(len(plotsList))
				print str(progress*100) + "%"
		else:
			counter = 1.
			print "Plots progress:"
			viewPlot2(plotsList[0],odbNameTmp)
			makeScreenshot(destinationFileName2 + "\\" + getName(odb.name) + "\\plots\\" + plotsNames[0])
			for tmp in range(1,len(plotsList)):
				pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\plots\\" + plotsNames[tmp]
				viewPlot(plotsList[tmp],odbNameTmp)
				makeScreenshot(pathTmp)
				counter += 1.
				progress = counter / float(len(plotsList))
				print str(progress*100) + "%"
		path = destinationFileName2 + "\\" + getName(odb.name) + "\\plots" 
		os.system("java convertPNGtoJPG " + "\"" + path + "\"")
	return plotsNames
########################################################################################################################## DONE
def parseToFrames(string):
	frameList = []
	if string == "":
		return frameList
	tmp = ""
	counter = 0
	lastSign = "-"
	for i in string:
		if i == ",":
			lastSign = ","
		if i == "-":
			lastSign = "-"

	if lastSign == "-":
		string += ","

	for i in range(len(string)):
		if string[counter] == ",":
			frameList.append(int(tmp))
			tmp = ""
		elif string[counter] == "-":
			tmpInt1 = int(tmp)
			tmp = ""
			for j in range(counter+1,len(string)):
				if string[j] == ",":
					tmpInt2 = int(tmp)
					tmp = ""
					counter += 1
					break
				else:
					tmp += string[j]
				counter += 1
			for j in range(tmpInt1,tmpInt2+1):
				frameList.append(j)
		else:
			tmp += string[counter]
		counter += 1
		if counter == len(string):
			break
	if tmp != "":
		frameList.append(int(tmp))
	return frameList
########################################################################################################################## DONE
def parseToView(frontTest,backTest,topTest,bottomTest,leftTest,rightTest,isoTest):
	viewList = []
	if isoTest == 1:
		viewList.append("Iso")
	if frontTest == 1:
		viewList.append("Front")
	if backTest == 1:
		viewList.append("Back")
	if topTest == 1:
		viewList.append("Top")
	if bottomTest == 1:
		viewList.append("Bottom")
	if leftTest == 1:
		viewList.append("Left")
	if rightTest == 1:
		viewList.append("Right")
	return viewList
########################################################################################################################## DONE
def parseToFieldOutput(string):
	fieldOutputList = []
	string += ","
	tmp = ""
	for i in string:
		if i == ",":
			fieldOutputList.append(tmp)
			tmp = ""
		else:
			tmp += i
	return fieldOutputList
########################################################################################################################## DONE
def parseToStep(string):
	list = odb.steps.keys()
	stepList = []
	string += ","
	tmp = ""
	for i in string:
		if i == ",":
			stepList.append(tmp)
			tmp = ""
		else:
			tmp += i
	status = "wrong"
	for tmp in stepList:
		for tmp2 in list:
			if tmp == tmp2:
				status = "good"
	if status == "good":
		return stepList
	else:
		print "Wrong step given."
		stepList = []
		return stepList
########################################################################################################################## DONE
def startPart():
	o7 = session.odbs[odb.name]
	session.viewports['Viewport: 1'].setValues(displayedObject=o7)
	session.mdbData.summary()
	session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(UNDEFORMED, ))
########################################################################################################################## DONE
def turnOffMesh():
	session.viewports['Viewport: 1'].odbDisplay.commonOptions.setValues(
        visibleEdges=FEATURE)
########################################################################################################################## DONE
def changePart(part):
	leaf = dgo.LeafFromPartInstance(partInstanceName=(part, ))
	session.viewports['Viewport: 1'].odbDisplay.displayGroup.replace(leaf=leaf)
########################################################################################################################## DONE
def addPart(part):
	leaf = dgo.LeafFromPartInstance(partInstanceName=(part, ))
	session.viewports['Viewport: 1'].odbDisplay.displayGroup.add(leaf=leaf)
########################################################################################################################## DONE
def changeView(view):
	session.viewports['Viewport: 1'].view.setValues(session.views[view])
########################################################################################################################## DONE
def makeScreenShotsOfParts(viewList = []):
	path = destinationFileName2 + "\\" + getName(odb.name) + "\\part\\"
	list = odb.rootAssembly.instances.keys()
	startPart()
	turnOffMesh()
	createDirectory(path+"Front")
	createDirectory(path+"Back")
	createDirectory(path+"Top")
	createDirectory(path+"Bottom")
	createDirectory(path+"Left")
	createDirectory(path+"Right")
	createDirectory(path+"Iso")
	for view in range(len(viewList)):
		changeView(viewList[view])
		for tmp in list:
			changePart(tmp)
			makeScreenshot(path+viewList[view]+"\\"+tmp)
		for tmp in list:
			addPart(tmp)
		makeScreenshot(path+viewList[view]+"\\"+"All")
	for tmp in range(len(viewList)):
		os.system("java convertPNGtoJPG " +"\"" + path+viewList[tmp]+"\"")
########################################################################################################################## DONE
def changeFrame(step,frame):
	session.viewports[session.currentViewportName].odbDisplay.setFrame(step=step, frame=frame)
########################################################################################################################## DONE
def startAllOutputs():
	o7 = session.odbs[odb.name]
	session.viewports['Viewport: 1'].setValues(displayedObject=o7)
	session.mdbData.summary()
	session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(DEFORMED, ))
	session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(CONTOURS_ON_DEF, ))
########################################################################################################################## DONE
def changeType(name,outputPosition,type = "none",type2 = "none"):
	if type != "none":
		if type == "INVARIANT":
			session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(variableLabel=name, outputPosition=outputPosition,
			refinement=(INVARIANT, type2), )
		if type == "COMPONENT":
			session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(variableLabel=name, outputPosition=outputPosition,
			refinement=(COMPONENT, type2), )
	else:
		session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
        	variableLabel=name, outputPosition=outputPosition, )
##########################################################################################################################
def translate(string):
	if string == MAGNITUDE:
		return "Magnitude"
	elif string == MISES:
		return "Mises"
	elif string == MAX_PRINCIPAL:
		return "Max. Principal"
	elif string == MID_PRINCIPAL:
		return "Mid. Principal"
	elif string == MIN_PRINCIPAL:
		return "Min. Principal"
	elif string == TRESCA:
		return "Tresca"
	elif string == PRESS:
		return "Pressure"
	elif string == INV3:
		return "Third Invariant"
##########################################################################################################################
def makeScreenShotsOfFieldOutputs(viewList = [],frameList = [], fieldOutputList = [], stepList = []):
	listPart = odb.rootAssembly.instances.keys()
	print stepList
	print frameList
	print fieldOutputList
	print viewList

	startAllOutputs()
	turnOffMesh()
	path = destinationFileName2 + "\\" + getName(odb.name) + "\\fieldOutputs\\"
	list = odb.steps.keys()
	for tmp in range(len(stepList)):
		stepData = odb.steps[stepList[tmp]]
		for tmp2 in range(len(frameList)):
			changeFrame(stepData.name,frameList[tmp2])
			frameData = stepData.frames[frameList[tmp2]]
			path = destinationFileName2 + "\\" + getName(odb.name) + "\\fieldOutputs\\" + stepData.name+ "\\" + str(frameList[tmp2])
			createDirectory(path)
			list2 = frameData.fieldOutputs.keys()
			for tmp3 in range(len(fieldOutputList)):
				fieldTmp = frameData.fieldOutputs[fieldOutputList[tmp3]]
				name = fieldTmp.name
				for invariant in range(len(fieldTmp.validInvariants)):
					changeType(name,fieldTmp.locations[0].position,"INVARIANT",translate(fieldTmp.validInvariants[invariant]))
					createDirectory(path+"\\"+name+"\\"+str(fieldTmp.validInvariants[invariant]))
					for view in range(len(viewList)):
						createDirectory(path+"\\"+name+"\\"+str(fieldTmp.validInvariants[invariant])+"\\"+viewList[view])
						changeView(viewList[view])
						for tmp4 in listPart:
							changePart(tmp4)
							makeScreenshot(path+"\\"+name+"\\"+str(fieldTmp.validInvariants[invariant])+"\\"+viewList[view]+"\\"+tmp4)
						for tmp4 in listPart:
							addPart(tmp4)
						makeScreenshot(path+"\\"+name+"\\"+str(fieldTmp.validInvariants[invariant])+"\\"+viewList[view]+"\\"+"All")
						os.system("java convertPNGtoJPG " +"\""+ path+"\\"+name+"\\"+str(fieldTmp.validInvariants[invariant])+"\\"+viewList[view]+"\"")
				for componentLabes in range(len(fieldTmp.componentLabels)):
					changeType(name,fieldTmp.locations[0].position,"COMPONENT",fieldTmp.componentLabels[componentLabes])
					createDirectory(path+"\\"+name+"\\"+str(fieldTmp.componentLabels[componentLabes]))
					for view in range(len(viewList)):
						createDirectory(path+"\\"+name+"\\"+str(fieldTmp.componentLabels[componentLabes])+"\\"+viewList[view])
						changeView(viewList[view])
						for tmp4 in listPart:
							changePart(tmp4)
							makeScreenshot(path+"\\"+name+"\\"+str(fieldTmp.componentLabels[componentLabes])+"\\"+viewList[view]+"\\"+tmp4)
						for tmp4 in listPart:
							addPart(tmp4)
						makeScreenshot(path+"\\"+name+"\\"+str(fieldTmp.componentLabels[componentLabes])+"\\"+viewList[view]+"\\"+"All")
						os.system("java convertPNGtoJPG " +"\""+ path+"\\"+name+"\\"+str(fieldTmp.componentLabels[componentLabes])+"\\"+viewList[view]+"\"")
				if len(fieldTmp.componentLabels) == 0 and len(fieldTmp.componentLabels) == 0:
					changeType(name,fieldTmp.locations[0].position)
					for view in range(len(viewList)):
						createDirectory(path+"\\"+name+"\\"+"\\"+viewList[view])
						changeView(viewList[view])
						for tmp4 in listPart:
							changePart(tmp4)
							makeScreenshot(path+"\\"+name+"\\"+"\\"+viewList[view]+"\\"+tmp4)
						for tmp4 in listPart:
							addPart(tmp4)
						makeScreenshot(path+"\\"+name+"\\"+"\\"+viewList[view]+"\\"+"All")
						os.system("java convertPNGtoJPG " +"\""+ path+"\\"+name+"\\"+"\\"+viewList[view]+"\"")

























