import sys
import os
from odbAccess import*
from textRepr import*
import datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.pagesizes import portrait
from reportlab.platypus import Image


def executeFunction(fileName,generalCheck,mechanicalCheck,thermalCheck,elementSetsCheck,partsCheck,instancesCheck,sectionCategoriesCheck,sectionsCheck,destinationFileName,
	showFramesCheck,showAllCheck,fromFrame,toFrame):
	odb = openOdb(fileName)
	global odb
	print "Exporting..."
	destinationFileName2 = destinationFileName
	global destinationFileName2
	listMaterials = odb.materials.keys()
	currentDate = datetime.datetime.now()
	stringList = []
	
	stringList.append(getName(odb.name))
	stringList.append("Date: " + currentDate.strftime("%Y-%m-%d %H:%M"))
	stringList.append(" ")
	for tmp in listMaterials:
		if generalCheck == 1 or mechanicalCheck == 1 or thermalCheck == 1:
			basicInfoFun(tmp,stringList)
			if generalCheck == 1:
				generalInfoFun(tmp,stringList)
			if mechanicalCheck == 1:
				mechanicalInfoFun(tmp,stringList)
			if thermalCheck == 1:
				thermalInfoFun(tmp,stringList)
			stringList.append(" ")
	if partsCheck == 1:
		partsInfoFun(stringList)
	if instancesCheck == 1:
		instancesInfoFun(stringList)
	if sectionsCheck == 1:
		sectionsInfoFun(stringList)
	if sectionCategoriesCheck == 1:
		sectionCategoriesInfoFun(stringList)
	if elementSetsCheck == 1:
		elementSetsInfoFun(stringList)
	if showFramesCheck == 1:
		if showAllCheck == "All":
			stepsInfoFun(stringList)
		else:
			stepsInfoFun2(stringList,fromFrame,toFrame)
	pdfName = destinationFileName + "\\" + getName(odb.name) + "\\" + getName(odb.name) + ".pdf"
	createDirectory(destinationFileName + "\\" + getName(odb.name))
	generatePDF(stringList,pdfName)
########################################################################################################################## DONE
def basicInfoFun(material,list):
	global odb
	try:
		test = odb.materials[material].name
		list.append("MATERIAL:")
		list.append("Name: " + odb.materials[material].name)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].description
		list.append("Description: " + odb.materials[material].description)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].materialIdentifier
		list.append("Material Identifier: " + odb.materials[material].materialIdentifier)
	except AttributeError:
		strangeVariable = 0
########################################################################################################################## DONE
def generalInfoFun(material,list):
	global odb
	global destinationFileName2
	try:
		test = odb.materials[material].density.dependencies
		list.append("Density:")
		list.append("    Dependencies: " + str(odb.materials[material].density.dependencies))
		list.append("    Distribution Type: " + str(odb.materials[material].density.distributionType))
		list.append("    Field Name: " + odb.materials[material].density.fieldName)
		list.append("    Temperature dependency: " + str(odb.materials[material].density.temperatureDependency))
		list.append("    Table: " + str(odb.materials[material].density.table))
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\density"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].density.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].density.table),pathTmp + "\\" + odb.materials[material].name)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].depvar.deleteVar
		list.append("Depvar:")
		list.append("    Delete Var: " + str(odb.materials[material].depvar.deleteVar))
		list.append("    N: " + str(odb.materials[material].depvar.n))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].userMaterial.mechanicalConstants
		list.append("User Material:")
		list.append("    Mechanical Constants: " + "see in directory \"mechanicalConstants\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\mechanicalConstants"
		createDirectory(pathTmp)
		printTable2(odb.materials[material].userMaterial.mechanicalConstants,pathTmp + "\\" + odb.materials[material].name)
		list.append("    Thermal Constants: " + "see in directory \"thermalConstants\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\thermalConstants"
		createDirectory(pathTmp)
		printTable2(odb.materials[material].userMaterial.thermalConstants,pathTmp + "\\" + odb.materials[material].name)
		list.append("    Type: " + str(odb.materials[material].userMaterial.type))
		list.append("    Unsymm: " + str(odb.materials[material].userMaterial.unsymm))
	except AttributeError:
		strangeVariable = 0
########################################################################################################################## DONE
def mechanicalInfoFun(material,list):
	global odb
	global destinationFileName2
	try:
		test = odb.materials[material].elastic.dependencies
		list.append("Elastic:")
		list.append("    Dependencies: " + str(odb.materials[material].elastic.dependencies))
		list.append("    Moduli: " + str(odb.materials[material].elastic.moduli))
		list.append("    No Compression: " + str(odb.materials[material].elastic.noCompression))
		list.append("    No Tension: " + str(odb.materials[material].elastic.noTension))
		list.append("    Temperature Dependency: " + str(odb.materials[material].elastic.temperatureDependency))
		list.append("    Type: " + str(odb.materials[material].elastic.type))
		list.append("    Table: " + "see in directory \"elastic\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\elastic"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].elastic.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].elastic.table),pathTmp + "\\" + odb.materials[material].name)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].plastic.dataType
		list.append("Plastic:")
		list.append("    Data Type: " + str(odb.materials[material].plastic.dataType))
		list.append("    Dependencies: " + str(odb.materials[material].plastic.dependencies))
		list.append("    Hardening: " + str(odb.materials[material].plastic.hardening))
		list.append("    Num Backstresses: " + str(odb.materials[material].plastic.numBackstresses))
		list.append("    Rate: " + str(odb.materials[material].plastic.rate))
		list.append("    Strain Range Dependency: " + str(odb.materials[material].plastic.strainRangeDependency))
		list.append("    Table: " + "see in directory \"plastic\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\plastic"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].plastic.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].plastic.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].plastic.temperatureDependency))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].porousMetalPlasticity.dependencies
		list.append("Porous Metal Plasticity:")
		list.append("    Dependencies: " + str(odb.materials[material].porousMetalPlasticity.dependencies))
		list.append("    Relative Density: " + str(odb.materials[material].porousMetalPlasticity.relativeDensity))
		list.append("    Table: " + "see in directory \"porousMetalPlasticity\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\porousMetalPlasticity"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].porousMetalPlasticity.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].porousMetalPlasticity.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].porousMetalPlasticity.temperatureDependency))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].ductileDamageInitiation.alpha
		list.append("Ductile Damage Initiation:")
		list.append("    Alpha: " + str(odb.materials[material].ductileDamageInitiation.alpha))
		try:
			test = odb.materials[material].ductileDamageInitiation.damageEvolution.degradation
			list.append("    Damage Evolution:")
			list.append("        Degradation: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.degradation))
			list.append("        Dependencies: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.dependencies))
			list.append("        Mixed Mode Behavior: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.mixedModeBehavior))
			list.append("        Mode Mix Ratio: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.modeMixRatio))
			list.append("        Power: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.power))
			list.append("        Softening: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.softening))
			list.append("        Table: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.table))
			pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\ductileDamageInitiation_damageEvolution"
			createDirectory(pathTmp)
			printTableToTXT(str(odb.materials[material].ductileDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			printTableToCSV(str(odb.materials[material].ductileDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			list.append("        Temperature Dependency: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.temperatureDependency))
			list.append("        Type: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.type))
		except AttributeError:
			strangeVariable = 0
		list.append("    Definition: " + str(odb.materials[material].ductileDamageInitiation.definition))
		list.append("    Dependencies: " + str(odb.materials[material].ductileDamageInitiation.dependencies))
		list.append("    Direction: " + str(odb.materials[material].ductileDamageInitiation.direction))
		list.append("    Feq: " + str(odb.materials[material].ductileDamageInitiation.feq))
		list.append("    Fnn: " + str(odb.materials[material].ductileDamageInitiation.fnn))
		list.append("    Fnt: " + str(odb.materials[material].ductileDamageInitiation.fnt))
		list.append("    Frequency: " + str(odb.materials[material].ductileDamageInitiation.frequency))
		list.append("    Ks: " + str(odb.materials[material].ductileDamageInitiation.ks))
		list.append("    Number Imperfections: " + str(odb.materials[material].ductileDamageInitiation.numberImperfections))
		list.append("    Omega: " + str(odb.materials[material].ductileDamageInitiation.omega))
		list.append("    Table: " + "see in directory \"ductileDamageInitiation_table\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\ductileDamageInitiation_table"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].ductileDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].ductileDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].ductileDamageInitiation.temperatureDependency))
		list.append("    Tolerance: " + str(odb.materials[material].ductileDamageInitiation.tolerance))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].maxsDamageInitiation.alpha
		list.append("Maxs Damage Initiation:")
		list.append("    Alpha: " + str(odb.materials[material].maxsDamageInitiation.alpha))
		try:
			test = odb.materials[material].maxsDamageInitiation.damageEvolution.degradation
			list.append("    Damage Evolution:")
			list.append("        Degradation: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.degradation))
			list.append("        Dependencies: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.dependencies))
			list.append("        Mixed Mode Behavior: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.mixedModeBehavior))
			list.append("        Mode Mix Ratio: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.modeMixRatio))
			list.append("        Power: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.power))
			list.append("        Softening: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.softening))
			list.append("        Table: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.table))
			pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\maxsDamageInitiation_damageEvolution"
			createDirectory(pathTmp)
			printTableToTXT(str(odb.materials[material].maxsDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			printTableToCSV(str(odb.materials[material].maxsDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			list.append("        Temperature Dependency: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.temperatureDependency))
			list.append("        Type: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.type))
		except AttributeError:
			strangeVariable = 0
		list.append("    Definition: " + str(odb.materials[material].maxsDamageInitiation.definition))
		list.append("    Dependencies: " + str(odb.materials[material].maxsDamageInitiation.dependencies))
		list.append("    Direction: " + str(odb.materials[material].maxsDamageInitiation.direction))
		list.append("    Feq: " + str(odb.materials[material].maxsDamageInitiation.feq))
		list.append("    Fnn: " + str(odb.materials[material].maxsDamageInitiation.fnn))
		list.append("    Fnt: " + str(odb.materials[material].maxsDamageInitiation.fnt))
		list.append("    Frequency: " + str(odb.materials[material].maxsDamageInitiation.frequency))
		list.append("    Ks: " + str(odb.materials[material].maxsDamageInitiation.ks))
		list.append("    Number Imperfections: " + str(odb.materials[material].maxsDamageInitiation.numberImperfections))
		list.append("    Omega: " + str(odb.materials[material].maxsDamageInitiation.omega))
		list.append("    Table: " + "see in directory \"maxsDamageInitiation_table\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\maxsDamageInitiation_table"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].maxsDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].maxsDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].maxsDamageInitiation.temperatureDependency))
		list.append("    Tolerance: " + str(odb.materials[material].maxsDamageInitiation.tolerance))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].maxpsDamageInitiation.alpha
		list.append("Maxps Damage Initiation:")
		list.append("    Alpha: " + str(odb.materials[material].maxpsDamageInitiation.alpha))
		try:
			test = odb.materials[material].maxpsDamageInitiation.damageEvolution.degradation
			list.append("    Damage Evolution:")
			list.append("        Degradation: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.degradation))
			list.append("        Dependencies: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.dependencies))
			list.append("        Mixed Mode Behavior: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.mixedModeBehavior))
			list.append("        Mode Mix Ratio: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.modeMixRatio))
			list.append("        Power: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.power))
			list.append("        Softening: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.softening))
			list.append("        Table: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.table))
			pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\maxpsDamageInitiation_damageEvolution"
			createDirectory(pathTmp)
			printTableToTXT(str(odb.materials[material].maxpsDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			printTableToCSV(str(odb.materials[material].maxpsDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			list.append("        Temperature Dependency: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.temperatureDependency))
			list.append("        Type: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.type))
		except AttributeError:
			strangeVariable = 0
		list.append("    Definition: " + str(odb.materials[material].maxpsDamageInitiation.definition))
		list.append("    Dependencies: " + str(odb.materials[material].maxpsDamageInitiation.dependencies))
		list.append("    Direction: " + str(odb.materials[material].maxpsDamageInitiation.direction))
		list.append("    Feq: " + str(odb.materials[material].maxpsDamageInitiation.feq))
		list.append("    Fnn: " + str(odb.materials[material].maxpsDamageInitiation.fnn))
		list.append("    Fnt: " + str(odb.materials[material].maxpsDamageInitiation.fnt))
		list.append("    Frequency: " + str(odb.materials[material].maxpsDamageInitiation.frequency))
		list.append("    Ks: " + str(odb.materials[material].maxpsDamageInitiation.ks))
		list.append("    Number Imperfections: " + str(odb.materials[material].maxpsDamageInitiation.numberImperfections))
		list.append("    Omega: " + str(odb.materials[material].maxpsDamageInitiation.omega))
		list.append("    Table: " + "see in directory \"maxpsDamageInitiation_table\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\maxpsDamageInitiation_table"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].maxpsDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].maxpsDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].maxpsDamageInitiation.temperatureDependency))
		list.append("    Tolerance: " + str(odb.materials[material].maxpsDamageInitiation.tolerance))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].johnsonCookDamageInitiation.alpha
		list.append("Johnson Cook DamageInitiation:")
		list.append("    Alpha: " + str(odb.materials[material].johnsonCookDamageInitiation.alpha))
		try:
			test = odb.materials[material].johnsonCookDamageInitiation.damageEvolution.degradation
			list.append("    Damage Evolution:")
			list.append("        Degradation: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.degradation))
			list.append("        Dependencies: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.dependencies))
			list.append("        Mixed Mode Behavior: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.mixedModeBehavior))
			list.append("        Mode Mix Ratio: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.modeMixRatio))
			list.append("        Power: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.power))
			list.append("        Softening: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.softening))
			list.append("        Table: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.table))
			pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\johnsonCookDamageInitiation_damageEvolution"
			createDirectory(pathTmp)
			printTableToTXT(str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			printTableToCSV(str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.table),pathTmp + "\\" + odb.materials[material].name)
			list.append("        Temperature Dependency: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.temperatureDependency))
			list.append("        Type: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.type))
		except AttributeError:
			strangeVariable = 0
		list.append("    Definition: " + str(odb.materials[material].johnsonCookDamageInitiation.definition))
		list.append("    Dependencies: " + str(odb.materials[material].johnsonCookDamageInitiation.dependencies))
		list.append("    Direction: " + str(odb.materials[material].johnsonCookDamageInitiation.direction))
		list.append("    Feq: " + str(odb.materials[material].johnsonCookDamageInitiation.feq))
		list.append("    Fnn: " + str(odb.materials[material].johnsonCookDamageInitiation.fnn))
		list.append("    Fnt: " + str(odb.materials[material].johnsonCookDamageInitiation.fnt))
		list.append("    Frequency: " + str(odb.materials[material].johnsonCookDamageInitiation.frequency))
		list.append("    Ks: " + str(odb.materials[material].johnsonCookDamageInitiation.ks))
		list.append("    Number Imperfections: " + str(odb.materials[material].johnsonCookDamageInitiation.numberImperfections))
		list.append("    Omega: " + str(odb.materials[material].johnsonCookDamageInitiation.omega))
		list.append("    Table: " + "see in directory \"johnsonCookDamageInitiation_table\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\johnsonCookDamageInitiation_table"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].johnsonCookDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].johnsonCookDamageInitiation.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].johnsonCookDamageInitiation.temperatureDependency))
		list.append("    Tolerance: " + str(odb.materials[material].johnsonCookDamageInitiation.tolerance))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].eos.dependencies
		list.append("Eos:")
		list.append("    Dependencies: " + str(odb.materials[material].eos.dependencies))
		list.append("    Detonation Energy: " + str(odb.materials[material].eos.detonationEnergy))
		try:
			test = odb.materials[material].eos.detonationPoint.table
			list.append("    Detonation Point: ")
			list.append("        Table: " + str(odb.materials[material].eos.detonationPoint.table))
		except AttributeError:
			strangeVariable = 0
		list.append("    Gas Specific Table: " + "see in directory \"eos_gasSpecificTable\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\eos_gasSpecificTable"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].eos.gasSpecificTable),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].eos.gasSpecificTable),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Gas Table: " + "see in directory \"eos_gasTable\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\eos_gasTable"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].eos.gasTable),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].eos.gasTable),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Reaction Table: " + "see in directory \"eos_reactionTable\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\eos_reactionTable"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].eos.reactionTable),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].eos.reactionTable),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Solid Table: " + "see in directory \"eos_solidTable\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\eos_solidTable"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].eos.solidTable),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].eos.solidTable),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Table: " + "see in directory \"eos_table\"")
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\eos_table"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].eos.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].eos.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].eos.temperatureDependency))
		list.append("    Type: " + str(odb.materials[material].eos.type))
	except AttributeError:
		strangeVariable = 0

########################################################################################################################## DONE
def thermalInfoFun(material,list):
	global odb
	global destinationFileName2
	try:
		test = odb.materials[material].conductivity.dependencies
		list.append("Conductivity:")
		list.append("    Dependencies: " + str(odb.materials[material].conductivity.dependencies))
		list.append("    Table: " + str(odb.materials[material].conductivity.table))
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\conductivity"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].conductivity.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].conductivity.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].conductivity.temperatureDependency))
		list.append("    Type: " + str(odb.materials[material].conductivity.type))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].inelasticHeatFraction.fraction
		list.append("Inelastic Heat Fraction:")
		list.append("    Fraction: " + str(odb.materials[material].inelasticHeatFraction.fraction))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].specificHeat.dependencies
		list.append("Specific Heat:")
		list.append("    Dependencies: " + str(odb.materials[material].specificHeat.dependencies))
		list.append("    Law: " + str(odb.materials[material].specificHeat.law))
		list.append("    Table: " + str(odb.materials[material].specificHeat.table))
		pathTmp = destinationFileName2 + "\\" + getName(odb.name) + "\\" + "\\specificHeat"
		createDirectory(pathTmp)
		printTableToTXT(str(odb.materials[material].specificHeat.table),pathTmp + "\\" + odb.materials[material].name)
		printTableToCSV(str(odb.materials[material].specificHeat.table),pathTmp + "\\" + odb.materials[material].name)
		list.append("    Temperature Dependency: " + str(odb.materials[material].specificHeat.temperatureDependency))
	except AttributeError:
		strangeVariable = 0
########################################################################################################################## DONE
def elementSetsInfoFun(list2):
	global odb
	list = odb.rootAssembly.elementSets.keys()
	for tmp in list:
		try:
			test = odb.rootAssembly.elementSets[tmp].name
			list2.append("ELEMENT SET: ")
			list2.append("Name: " + odb.rootAssembly.elementSets[tmp].name)
			list2.append("Instance Names: " + str(odb.rootAssembly.elementSets[tmp].instanceNames))
			list2.append("Is Internal: " + str(odb.rootAssembly.elementSets[tmp].isInternal))
			list2.append("Nodes: " + str(odb.rootAssembly.elementSets[tmp].nodes))
			list2.append(" ")
		except AttributeError:
			strangeVariable = 0
########################################################################################################################## DONE
def partsInfoFun(list2):
	global odb
	list = odb.parts.keys()
	for tmp in list:
		try:
			test = odb.parts[tmp].name
			list2.append("PART:")
			list2.append("Name: " + odb.parts[tmp].name)
			list2.append("Analytic Surface: " + str(odb.parts[tmp].analyticSurface))
			list2.append("Embedded Space: " + str(odb.parts[tmp].embeddedSpace))
			list2.append("Type: " + str(odb.parts[tmp].type))
			list2.append(" ")
		except AttributeError:
			strangeVariable = 0
########################################################################################################################## DONE
def instancesInfoFun(listTmp):
	global odb
	list = odb.rootAssembly.instances.keys()
	for tmp in list:
		try:
			test = odb.rootAssembly.instances[tmp].name
			listTmp.append("INSTANCE: ")
			listTmp.append("Name: " + odb.rootAssembly.instances[tmp].name)
			listTmp.append("Analytic Surface: " + str(odb.rootAssembly.instances[tmp].analyticSurface))
			listTmp.append("Embedded Space: " + str(odb.rootAssembly.instances[tmp].embeddedSpace))
			listTmp.append("Type: " + str(odb.rootAssembly.instances[tmp].type))
			list2 = odb.rootAssembly.instances[tmp].elementSets.keys()
			for tmp2 in list2:		
				try:
					test = odb.rootAssembly.instances[tmp].elementSets[tmp2].name
					listTmp.append("ELEMENT SET:")
					listTmp.append("    Name: " + odb.rootAssembly.instances[tmp].elementSets[tmp2].name)
					listTmp.append("    Faces: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].faces))
					listTmp.append("    Instance Names: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].instanceNames))
					listTmp.append("    Instances: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].instances))
					listTmp.append("    Is Internal: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].isInternal))
					listTmp.append("    Nodes: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].nodes))
				except AttributeError:
					strangeVariable = 0
			number = len(odb.rootAssembly.instances[tmp].sectionAssignments)
			for number in range(number):
				try:
					test = odb.rootAssembly.instances[tmp].sectionAssignments[number].sectionName
					listTmp.append("SECTION ASSIGMENT:")
					listTmp.append("    Section Name: " + odb.rootAssembly.instances[tmp].sectionAssignments[number].sectionName)
					listTmp.append("    Offset: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].offset))
					try:
						test = odb.rootAssembly.instances[tmp].sectionAssignments[number].region.name
						listTmp.append("    REGION: ")
						listTmp.append("        Name: " + odb.rootAssembly.instances[tmp].sectionAssignments[number].region.name)
						listTmp.append("        Faces: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.faces))
						listTmp.append("        Instance Names: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.instanceNames))
						listTmp.append("        Instances: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.instances))
						listTmp.append("        Is Internal: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.isInternal))
						listTmp.append("        Nodes: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.nodes))
					except AttributeError:
						strangeVariable = 0
				except AttributeError:
					strangeVariable = 0
			listTmp.append(" ")
		except AttributeError:
			strangeVariable = 0
########################################################################################################################## DONE
def sectionCategoriesInfoFun(list2):
	global odb
	list = odb.sectionCategories.keys()
	for tmp in list:
		try:
			test = odb.sectionCategories[tmp].name
			list2.append("SECTION CATEGORY:")
			list2.append("Name: " + odb.sectionCategories[tmp].name)
			list2.append("Description: " + str(odb.sectionCategories[tmp].description))
			list2.append(" ")
		except AttributeError:
			strangeVariable = 0
########################################################################################################################## DONE
def sectionsInfoFun(list2):
	global odb
	list = odb.sections.keys()
	for tmp in list:
		try:
			test2 = odb.sections[tmp].name
			list2.append("SECTION:")
			list2.append("Name: " + odb.sections[tmp].name)
			list2.append("Material: " + str(odb.sections[tmp].material))
			list2.append("Thickness: " + str(odb.sections[tmp].thickness))
			list2.append(" ")
		except AttributeError:
			strangeVariable = 0
########################################################################################################################## PROPABLY DONE
def generatePDF(list,name):
	pageNumber = 1
	beggining = 50
	fontSize = 14
	newLine = fontSize + 4
	c = canvas.Canvas(name,pagesize=portrait(A4),bottomup=0)
	c.setFont('Helvetica',fontSize, leading=None)
	for tmp in range(len(list)):
		if beggining >= 765:
			c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
			pageNumber += 1
			c.showPage()
			beggining = 50
			c.setFont('Helvetica',fontSize, leading=None)
		c.drawString(50,beggining,list[tmp])
		beggining += newLine
	c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
	c.showPage()
	c.save()
	print "Exported to " + name
########################################################################################################################## DONE
def getName(string):
	length = len(string)
	tmp = ""
	for i in range(length-1,0,-1):
		if string[i] == "/":
			for j in range(i+1,length-4):
				tmp += string[j]
			break
	return tmp
########################################################################################################################## DONE
def printTable(table,list):
	counter = 0
	left = 0
	right = 0
	tmp = ""
	while (counter < len(table) - 2):
		counter += 1
		if table[counter] == "(":
			left = counter
		if table[counter] == ")":
			right = counter
			for i in range(left + 1,right):
				tmp += table[i]
			list.append(tmp)
			tmp = ""
########################################################################################################################## DONE
def printTable2(table,name):
	file = open(name+".txt","w")
	file2 = open(name+".csv","w")
	for tmp in range(len(table)):
		file.write(str(table[tmp])+"\n")
		file2.write(str(table[tmp])+"\n")
	file.close()
	file2.close()
########################################################################################################################## DONE
def printTableToTXT(table,name):
	counter = 0
	left = 0
	right = 0
	tmp = ""
	file = open(name+".txt","w")
	while (counter < len(table) - 2):
		counter += 1
		if table[counter] == "(":
			left = counter
		if table[counter] == ")":
			right = counter
			for i in range(left + 1,right):
				tmp += table[i]
			tmp+="\n"
			file.write(tmp)
			tmp = ""	
	file.close()
########################################################################################################################## DONE
def printTableToCSV(table,name):
	counter = 0
	left = 0
	right = 0
	tmp = ""
	file = open(name+".csv","w")
	while (counter < len(table) - 2):
		counter += 1
		if table[counter] == "(":
			left = counter
		if table[counter] == ")":
			right = counter
			for i in range(left + 1,right):
				tmp += table[i]
			tmp+="\n"
			file.write(tmp)
			tmp = ""	
	file.close()
########################################################################################################################## DONE
def createDirectory(path):
	if not os.path.exists(path):
		os.makedirs(path)

def stepsInfoFun(stringList):
	counter = 0.
	list = odb.steps.keys()
	for tmp in list:
		try:
			test = odb.steps[tmp].name
			stringList.append("STEP:")
			stringList.append("Name: " + odb.steps[tmp].name)
			stringList.append("Acoustic Mass: " + str(odb.steps[tmp].acousticMass))
			stringList.append("Acoustic Mass Center: " + str(odb.steps[tmp].acousticMassCenter))
			stringList.append("Description: " + str(odb.steps[tmp].description))
			stringList.append("Domain: " + str(odb.steps[tmp].domain))
			stringList.append("Procedure: " + str(odb.steps[tmp].procedure))
			stringList.append("Retained Eigen Modes: " + str(odb.steps[tmp].retainedEigenModes))
			stringList.append("Time Period: " + str(odb.steps[tmp].timePeriod))
			stringList.append("Total Time: " + str(odb.steps[tmp].totalTime))
			print "Step progress:"
			try:
				for tmp2 in range(len(odb.steps[tmp].frames)):
					stringList.append("FRAME")
					stringList.append("    Frame Id: " + str(odb.steps[tmp].frames[tmp2].frameId))
					stringList.append("    Description: " + str(odb.steps[tmp].frames[tmp2].description))
					stringList.append("    Associated Frame: " + str(odb.steps[tmp].frames[tmp2].associatedFrame))
					stringList.append("    Cyclic Mode Number: " + str(odb.steps[tmp].frames[tmp2].cyclicModeNumber))
					stringList.append("    Domain: " + str(odb.steps[tmp].frames[tmp2].domain))
					stringList.append("    Frame Value: " + str(odb.steps[tmp].frames[tmp2].frameValue))
					stringList.append("    Frequency: " + str(odb.steps[tmp].frames[tmp2].frequency))
					stringList.append("    Increment Number: " + str(odb.steps[tmp].frames[tmp2].incrementNumber))
					stringList.append("    Is Imaginary: " + str(odb.steps[tmp].frames[tmp2].isImaginary))
					stringList.append("    Load Case: " + str(odb.steps[tmp].frames[tmp2].loadCase))
					stringList.append("    Mode: " + str(odb.steps[tmp].frames[tmp2].mode))
					try:
						list3 = odb.steps[tmp].frames[tmp2].fieldOutputs.keys()
						for tmp3 in list3:
							test = odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].name
							stringList.append("    FIELD OUTPUT:")
							stringList.append("        Name: " + odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].name)
							stringList.append("        Base Element Types: " + str(odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].baseElementTypes))
							stringList.append("        Component Labels: " + str(odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].componentLabels))
							stringList.append("        Description: " + str(odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].description))
							stringList.append("        Is Complex: " + str(odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].isComplex))
							stringList.append("        Type: " + str(odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].type))
							stringList.append("        Valid Invariants: " + str(odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].validInvariants))
					except AttributeError:
						strangeVariable = 0
					counter += 1.
					progress =  counter / float(len(odb.steps[tmp].frames))
					print str(progress*100.) + "%"
			except AttributeError:
				strangeVariable = 0
			stringList.append(" ")
			counter = 0.
			print "Ending step."
		except AttributeError:
			strangeVariable = 0

def stepsInfoFun2(stringList,fromFrame,toFrame):
	counter = 0.
	list = odb.steps.keys()
	for tmp in list:
		try:
			test = odb.steps[tmp].name
			stringList.append("STEP:")
			stringList.append("Name: " + odb.steps[tmp].name)
			stringList.append("Acoustic Mass: " + str(odb.steps[tmp].acousticMass))
			stringList.append("Acoustic Mass Center: " + str(odb.steps[tmp].acousticMassCenter))
			stringList.append("Description: " + str(odb.steps[tmp].description))
			stringList.append("Domain: " + str(odb.steps[tmp].domain))
			stringList.append("Procedure: " + str(odb.steps[tmp].procedure))
			stringList.append("Retained Eigen Modes: " + str(odb.steps[tmp].retainedEigenModes))
			stringList.append("Time Period: " + str(odb.steps[tmp].timePeriod))
			stringList.append("Total Time: " + str(odb.steps[tmp].totalTime))
			print "Step progress:"
			try:
				for tmp2 in range(fromFrame,toFrame+1):
					stringList.append("FRAME")
					stringList.append("    Frame Id: " + str(odb.steps[tmp].frames[tmp2].frameId))
					stringList.append("    Description: " + str(odb.steps[tmp].frames[tmp2].description))
					stringList.append("    Associated Frame: " + str(odb.steps[tmp].frames[tmp2].associatedFrame))
					stringList.append("    Cyclic Mode Number: " + str(odb.steps[tmp].frames[tmp2].cyclicModeNumber))
					stringList.append("    Domain: " + str(odb.steps[tmp].frames[tmp2].domain))
					stringList.append("    Frame Value: " + str(odb.steps[tmp].frames[tmp2].frameValue))
					stringList.append("    Frequency: " + str(odb.steps[tmp].frames[tmp2].frequency))
					stringList.append("    Increment Number: " + str(odb.steps[tmp].frames[tmp2].incrementNumber))
					stringList.append("    Is Imaginary: " + str(odb.steps[tmp].frames[tmp2].isImaginary))
					stringList.append("    Load Case: " + str(odb.steps[tmp].frames[tmp2].loadCase))
					stringList.append("    Mode: " + str(odb.steps[tmp].frames[tmp2].mode))
					try:
						list3 = odb.steps[tmp].frames[tmp2].fieldOutputs.keys()
						for tmp3 in list3:
							test = odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].name
							stringList.append("    FIELD OUTPUT:")
							stringList.append("        Name: " + odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].name)
							stringList.append("        Base Element Types: " + str(odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].baseElementTypes))
							stringList.append("        Component Labels: " + str(odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].componentLabels))
							stringList.append("        Description: " + str(odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].description))
							stringList.append("        Is Complex: " + str(odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].isComplex))
							stringList.append("        Type: " + str(odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].type))
							stringList.append("        Valid Invariants: " + str(odb.steps[tmp].frames[tmp2].fieldOutputs[tmp3].validInvariants))
					except AttributeError:
						strangeVariable = 0
					counter += 1.
					progress =  counter / float(toFrame+1)
					print str(progress*100.) + "%"
			except AttributeError:
				strangeVariable = 0
			stringList.append(" ")
			counter = 0.
			print "Ending step."
		except AttributeError:
			strangeVariable = 0

