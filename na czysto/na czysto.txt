import sys
sys.path.append("C:\\temp\\skrypty\\myUtils")
from odbAccess import*
from textRepr import*
import datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.pagesizes import portrait
from reportlab.platypus import Image


def executeFunction(fileName,generalCheck,mechanicalCheck,thermalCheck,elementSetsCheck,partsCheck,instancesCheck,sectionCategoriesCheck,sectionsCheck):
	odb = openOdb(fileName)
	global odb
	listMaterials = odb.materials.keys()
	currentDate = datetime.datetime.now()
	stringList = []
	
	stringList.append(getName(odb.name))
	stringList.append("Date: " + currentDate.strftime("%Y-%m-%d %H:%M"))
	stringList.append(" ")
	for tmp in listMaterials:
		if generalCheck == 1 or mechanicalCheck == 1 or thermalCheck == 1:
			basicInfoFun(tmp,stringList)
			if generalCheck == 1:
				generalInfoFun(tmp,stringList)
			if mechanicalCheck == 1:
				mechanicalInfoFun(tmp)
			if thermalCheck == 1:
				thermalInfoFun(tmp)
			stringList.append(" ")
	if partsCheck == 1:
		partsInfoFun()
	if instancesCheck == 1:
		instancesInfoFun()
	if sectionsCheck == 1:
		sectionsInfoFun()
	if sectionCategoriesCheck == 1:
		sectionCategoriesInfoFun()
	if elementSetsCheck == 1:
		elementSetsInfoFun()
	print " "
	print " "
	print " "
	generatePDF(stringList)

def basicInfoFun(material,list):
	global odb
	try:
		test = odb.materials[material].name
		list.append("MATERIAL:")
		list.append("Name: " + odb.materials[material].name)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].description
		list.append("Description: " + odb.materials[material].description)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].materialIdentifier
		list.append("Material Identifier: " + odb.materials[material].materialIdentifier)
	except AttributeError:
		strangeVariable = 0

def generalInfoFun(material,list):
	global odb
	try:
		test = odb.materials[material].density.dependencies
		list.append("Density:")
		list.append("    Dependencies: " + str(odb.materials[material].density.dependencies))
		list.append("    Distribution Type: " + str(odb.materials[material].density.distributionType))
		list.append("    Field Name: " + odb.materials[material].density.fieldName)
		list.append("    Temperature dependency: " + str(odb.materials[material].density.temperatureDependency))
		#list.append("    Table: " + str(odb.materials[material].density.table))
		list.append("    Table:")
		printTable(str(odb.materials[material].density.table),list)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].depvar.deleteVar
		list.append("Depvar:")
		list.append("    Delete Var: " + str(odb.materials[material].depvar.deleteVar))
		list.append("    N: " + str(odb.materials[material].depvar.n))
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].userMaterial.mechanicalConstants
		list.append("User Material:")
		list.append("    Mechanical Constants: " + str(odb.materials[material].userMaterial.mechanicalConstants))
		printTableUserMaterial(odb.materials[material].userMaterial.mechanicalConstants,list)
		list.append("    Thermal Constants: " + str(odb.materials[material].userMaterial.thermalConstants))
		list.append("    Type: " + str(odb.materials[material].userMaterial.type))
		list.append("    Unsymm: " + str(odb.materials[material].userMaterial.unsymm))
	except AttributeError:
		strangeVariable = 0

def mechanicalInfoFun(material):
	global odb
	try:
		test = odb.materials[material].elastic.dependencies
		print "Elastic:"
		print "    Dependencies: " + str(odb.materials[material].elastic.dependencies)
		print "    Moduli: " + str(odb.materials[material].elastic.moduli)
		print "    No Compression: " + str(odb.materials[material].elastic.noCompression)
		print "    No Tension: " + str(odb.materials[material].elastic.noTension)
		print "    Temperature Dependency: " + str(odb.materials[material].elastic.temperatureDependency)
		print "    Type: " + str(odb.materials[material].elastic.type)
		print "    Table: " + str(odb.materials[material].elastic.table)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].plastic.dataType
		print "Plastic:"
		print "    Data Type: " + str(odb.materials[material].plastic.dataType)
		print "    Dependencies: " + str(odb.materials[material].plastic.dependencies)
		print "    Hardening: " + str(odb.materials[material].plastic.hardening)
		print "    Num Backstresses: " + str(odb.materials[material].plastic.numBackstresses)
		print "    Rate: " + str(odb.materials[material].plastic.rate)
		print "    Strain Range Dependency: " + str(odb.materials[material].plastic.strainRangeDependency)
		print "    Table: " + str(odb.materials[material].plastic.table)
		print "    Temperature Dependency: " + str(odb.materials[material].plastic.temperatureDependency)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].porousMetalPlasticity.dependencies
		print"Porous Metal Plasticity:"
		print "    Dependencies: " + str(odb.materials[material].porousMetalPlasticity.dependencies)
		print "    Relative Density: " + str(odb.materials[material].porousMetalPlasticity.relativeDensity)
		print "    Table: " + str(odb.materials[material].porousMetalPlasticity.table)
		print "    Temperature Dependency: " + str(odb.materials[material].porousMetalPlasticity.temperatureDependency)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].ductileDamageInitiation.alpha
		print"Ductile Damage Initiation:"
		print "    Alpha: " + str(odb.materials[material].ductileDamageInitiation.alpha)
		try:
			test = odb.materials[material].ductileDamageInitiation.damageEvolution.degradation
			print "    Damage Evolution:"
			print "        Degradation: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.degradation)
			print "        Dependencies: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.dependencies)
			print "        Mixed Mode Behavior: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.mixedModeBehavior)
			print "        Mode Mix Ratio: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.modeMixRatio)
			print "        Power: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.power)
			print "        Softening: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.softening)
			print "        Table: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.table)
			print "        Temperature Dependency: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.temperatureDependency)
			print "        Type: " + str(odb.materials[material].ductileDamageInitiation.damageEvolution.type)
		except AttributeError:
			strangeVariable = 0
		print "    Definition: " + str(odb.materials[material].ductileDamageInitiation.definition)
		print "    Dependencies: " + str(odb.materials[material].ductileDamageInitiation.dependencies)
		print "    Direction: " + str(odb.materials[material].ductileDamageInitiation.direction)
		print "    Feq: " + str(odb.materials[material].ductileDamageInitiation.feq)
		print "    Fnn: " + str(odb.materials[material].ductileDamageInitiation.fnn)
		print "    Fnt: " + str(odb.materials[material].ductileDamageInitiation.fnt)
		print "    Frequency: " + str(odb.materials[material].ductileDamageInitiation.frequency)
		print "    Ks: " + str(odb.materials[material].ductileDamageInitiation.ks)
		print "    Number Imperfections: " + str(odb.materials[material].ductileDamageInitiation.numberImperfections)
		print "    Omega: " + str(odb.materials[material].ductileDamageInitiation.omega)
		print "    Table: " + str(odb.materials[material].ductileDamageInitiation.table)
		print "    Temperature Dependency: " + str(odb.materials[material].ductileDamageInitiation.temperatureDependency)
		print "    Tolerance: " + str(odb.materials[material].ductileDamageInitiation.tolerance)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].maxsDamageInitiation.alpha
		print"Maxs Damage Initiation:"
		print "    Alpha: " + str(odb.materials[material].maxsDamageInitiation.alpha)
		try:
			test = odb.materials[material].maxsDamageInitiation.damageEvolution.degradation
			print "    Damage Evolution:"
			print "        Degradation: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.degradation)
			print "        Dependencies: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.dependencies)
			print "        Mixed Mode Behavior: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.mixedModeBehavior)
			print "        Mode Mix Ratio: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.modeMixRatio)
			print "        Power: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.power)
			print "        Softening: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.softening)
			print "        Table: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.table)
			print "        Temperature Dependency: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.temperatureDependency)
			print "        Type: " + str(odb.materials[material].maxsDamageInitiation.damageEvolution.type)
		except AttributeError:
			strangeVariable = 0
		print "    Definition: " + str(odb.materials[material].maxsDamageInitiation.definition)
		print "    Dependencies: " + str(odb.materials[material].maxsDamageInitiation.dependencies)
		print "    Direction: " + str(odb.materials[material].maxsDamageInitiation.direction)
		print "    Feq: " + str(odb.materials[material].maxsDamageInitiation.feq)
		print "    Fnn: " + str(odb.materials[material].maxsDamageInitiation.fnn)
		print "    Fnt: " + str(odb.materials[material].maxsDamageInitiation.fnt)
		print "    Frequency: " + str(odb.materials[material].maxsDamageInitiation.frequency)
		print "    Ks: " + str(odb.materials[material].maxsDamageInitiation.ks)
		print "    Number Imperfections: " + str(odb.materials[material].maxsDamageInitiation.numberImperfections)
		print "    Omega: " + str(odb.materials[material].maxsDamageInitiation.omega)
		print "    Table: " + str(odb.materials[material].maxsDamageInitiation.table)
		print "    Temperature Dependency: " + str(odb.materials[material].maxsDamageInitiation.temperatureDependency)
		print "    Tolerance: " + str(odb.materials[material].maxsDamageInitiation.tolerance)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].maxpsDamageInitiation.alpha
		print"Maxps Damage Initiation:"
		print "    Alpha: " + str(odb.materials[material].maxpsDamageInitiation.alpha)
		try:
			test = odb.materials[material].maxpsDamageInitiation.damageEvolution.degradation
			print "    Damage Evolution:"
			print "        Degradation: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.degradation)
			print "        Dependencies: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.dependencies)
			print "        Mixed Mode Behavior: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.mixedModeBehavior)
			print "        Mode Mix Ratio: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.modeMixRatio)
			print "        Power: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.power)
			print "        Softening: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.softening)
			print "        Table: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.table)
			print "        Temperature Dependency: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.temperatureDependency)
			print "        Type: " + str(odb.materials[material].maxpsDamageInitiation.damageEvolution.type)
		except AttributeError:
			strangeVariable = 0
		print "    Definition: " + str(odb.materials[material].maxpsDamageInitiation.definition)
		print "    Dependencies: " + str(odb.materials[material].maxpsDamageInitiation.dependencies)
		print "    Direction: " + str(odb.materials[material].maxpsDamageInitiation.direction)
		print "    Feq: " + str(odb.materials[material].maxpsDamageInitiation.feq)
		print "    Fnn: " + str(odb.materials[material].maxpsDamageInitiation.fnn)
		print "    Fnt: " + str(odb.materials[material].maxpsDamageInitiation.fnt)
		print "    Frequency: " + str(odb.materials[material].maxpsDamageInitiation.frequency)
		print "    Ks: " + str(odb.materials[material].maxpsDamageInitiation.ks)
		print "    Number Imperfections: " + str(odb.materials[material].maxpsDamageInitiation.numberImperfections)
		print "    Omega: " + str(odb.materials[material].maxpsDamageInitiation.omega)
		print "    Table: " + str(odb.materials[material].maxpsDamageInitiation.table)
		print "    Temperature Dependency: " + str(odb.materials[material].maxpsDamageInitiation.temperatureDependency)
		print "    Tolerance: " + str(odb.materials[material].maxpsDamageInitiation.tolerance)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].johnsonCookDamageInitiation.alpha
		print"Johnson Cook DamageInitiation:"
		print "    Alpha: " + str(odb.materials[material].johnsonCookDamageInitiation.alpha)
		try:
			test = odb.materials[material].johnsonCookDamageInitiation.damageEvolution.degradation
			print "    Damage Evolution:"
			print "        Degradation: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.degradation)
			print "        Dependencies: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.dependencies)
			print "        Mixed Mode Behavior: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.mixedModeBehavior)
			print "        Mode Mix Ratio: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.modeMixRatio)
			print "        Power: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.power)
			print "        Softening: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.softening)
			print "        Table: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.table)
			print "        Temperature Dependency: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.temperatureDependency)
			print "        Type: " + str(odb.materials[material].johnsonCookDamageInitiation.damageEvolution.type)
		except AttributeError:
			strangeVariable = 0
		print "    Definition: " + str(odb.materials[material].johnsonCookDamageInitiation.definition)
		print "    Dependencies: " + str(odb.materials[material].johnsonCookDamageInitiation.dependencies)
		print "    Direction: " + str(odb.materials[material].johnsonCookDamageInitiation.direction)
		print "    Feq: " + str(odb.materials[material].johnsonCookDamageInitiation.feq)
		print "    Fnn: " + str(odb.materials[material].johnsonCookDamageInitiation.fnn)
		print "    Fnt: " + str(odb.materials[material].johnsonCookDamageInitiation.fnt)
		print "    Frequency: " + str(odb.materials[material].johnsonCookDamageInitiation.frequency)
		print "    Ks: " + str(odb.materials[material].johnsonCookDamageInitiation.ks)
		print "    Number Imperfections: " + str(odb.materials[material].johnsonCookDamageInitiation.numberImperfections)
		print "    Omega: " + str(odb.materials[material].johnsonCookDamageInitiation.omega)
		print "    Table: " + str(odb.materials[material].johnsonCookDamageInitiation.table)
		print "    Temperature Dependency: " + str(odb.materials[material].johnsonCookDamageInitiation.temperatureDependency)
		print "    Tolerance: " + str(odb.materials[material].johnsonCookDamageInitiation.tolerance)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].eos.dependencies
		print"Eos:"
		print "    Dependencies: " + str(odb.materials[material].eos.dependencies)
		print "    Detonation Energy: " + str(odb.materials[material].eos.detonationEnergy)
		try:
			test = odb.materials[material].eos.detonationPoint.table
			print "    Detonation Point: "
			print "    	Table: " + str(odb.materials[material].eos.detonationPoint.table)
		except AttributeError:
			strangeVariable = 0
		print "    Gas Specific Table: " + str(odb.materials[material].eos.gasSpecificTable)
		print "    Gas Table: " + str(odb.materials[material].eos.gasTable)
		print "    Reaction Table: " + str(odb.materials[material].eos.reactionTable)
		print "    Solid Table: " + str(odb.materials[material].eos.solidTable)
		print "    Table: " + str(odb.materials[material].eos.table)
		print "    Temperature Dependency: " + str(odb.materials[material].eos.temperatureDependency)
		print "    Type: " + str(odb.materials[material].eos.type)
	except AttributeError:
		strangeVariable = 0


def thermalInfoFun(material):
	global odb
	try:
		test = odb.materials[material].conductivity.dependencies
		print "Conductivity:"
		print "    Dependencies: " + str(odb.materials[material].conductivity.dependencies)
		print "    Table: " + str(odb.materials[material].conductivity.table)
		print "    Temperature Dependency: " + str(odb.materials[material].conductivity.temperatureDependency)
		print "    Type: " + str(odb.materials[material].conductivity.type)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].inelasticHeatFraction.fraction
		print"Inelastic Heat Fraction:"
		print "    Fraction: " + str(odb.materials[material].inelasticHeatFraction.fraction)
	except AttributeError:
		strangeVariable = 0

	try:
		test = odb.materials[material].specificHeat.dependencies
		print"Specific Heat:"
		print "    Dependencies: " + str(odb.materials[material].specificHeat.dependencies)
		print "    Law: " + str(odb.materials[material].specificHeat.law)
		print "    Table: " + str(odb.materials[material].specificHeat.table)
		print "    Temperature Dependency: " + str(odb.materials[material].specificHeat.temperatureDependency)
	except AttributeError:
		strangeVariable = 0

def elementSetsInfoFun():
	global odb
	list = odb.rootAssembly.elementSets.keys()
	for tmp in list:
		try:
			test = odb.rootAssembly.elementSets[tmp].name
			print "ELEMENT SET: "
			print "Name: " + odb.rootAssembly.elementSets[tmp].name
			print "Instance Names: " + str(odb.rootAssembly.elementSets[tmp].instanceNames)
			print "Is Internal: " + str(odb.rootAssembly.elementSets[tmp].isInternal)
			print "Nodes: " + str(odb.rootAssembly.elementSets[tmp].nodes)
			print " "
		except AttributeError:
			strangeVariable = 0

def partsInfoFun():
	list = odb.parts.keys()
	for tmp in list:
		try:
			test = odb.parts[tmp].name
			print "PART:"
			print "Name: " + odb.parts[tmp].name
			print "Analytic Surface: " + str(odb.parts[tmp].analyticSurface)
			print "Embedded Space: " + str(odb.parts[tmp].embeddedSpace)
			print "Type: " + str(odb.parts[tmp].type)
			print " "
		except AttributeError:
			strangeVariable = 0

def instancesInfoFun():
	list = odb.rootAssembly.instances.keys()
	for tmp in list:
		try:
			test = odb.rootAssembly.instances[tmp].name
			print "INSTANCE: "
			print "Name: " + odb.rootAssembly.instances[tmp].name
			print "Analytic Surface: " + str(odb.rootAssembly.instances[tmp].analyticSurface)
			print "Embedded Space: " + str(odb.rootAssembly.instances[tmp].embeddedSpace)
			print "Type: " + str(odb.rootAssembly.instances[tmp].type)
			list2 = odb.rootAssembly.instances[tmp].elementSets.keys()
			for tmp2 in list2:		
				try:
					test = odb.rootAssembly.instances[tmp].elementSets[tmp2].name
					print "ELEMENT SET:"
					print "    Name: " + odb.rootAssembly.instances[tmp].elementSets[tmp2].name
					print "    Faces: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].faces)
					print "    Instance Names: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].instanceNames)
					print "    Instances: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].instances)
					print "    Is Internal: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].isInternal)
					print "    Nodes: " + str(odb.rootAssembly.instances[tmp].elementSets[tmp2].nodes)
				except AttributeError:
					strangeVariable = 0
			number = len(odb.rootAssembly.instances[tmp].sectionAssignments)
			for number in range(number):
				try:
					test = odb.rootAssembly.instances[tmp].sectionAssignments[number].sectionName
					print "SECTION ASSIGMENT:"
					print "    Section Name: " + odb.rootAssembly.instances[tmp].sectionAssignments[number].sectionName
					print "    Offset: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].offset)
					try:
						test = odb.rootAssembly.instances[tmp].sectionAssignments[number].region.name
						print "    REGION: "
						print "        Name: " + odb.rootAssembly.instances[tmp].sectionAssignments[number].region.name
						print "        Faces: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.faces)
						print "        Instance Names: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.instanceNames)
						print "        Instances: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.instances)
						print "        Is Internal: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.isInternal)
						print "        Nodes: " + str(odb.rootAssembly.instances[tmp].sectionAssignments[number].region.nodes)
					except AttributeError:
						strangeVariable = 0
				except AttributeError:
					strangeVariable = 0
			print " "
		except AttributeError:
			strangeVariable = 0

def sectionCategoriesInfoFun():
	list = odb.sectionCategories.keys()
	for tmp in list:
		try:
			test = odb.sectionCategories[tmp].name
			print "SECTION CATEGORY:"
			print "Name: " + odb.sectionCategories[tmp].name
			print "Description: " + str(odb.sectionCategories[tmp].description)
			print " "
		except AttributeError:
			strangeVariable = 0

def sectionsInfoFun():
	list = odb.sections.keys()
	for tmp in list:
		try:
			test = odb.sections[tmp].name
			print "SECTION:"
			print "Name: " + odb.sections[tmp].name
			print "Material: " + str(odb.sections[tmp].material)
			print "Thickness: " + str(odb.sections[tmp].thickness)
			print " "
		except AttributeError:
			strangeVariable = 0

def generatePDF(list):
	pageNumber = 1
	beggining = 50
	fontSize = 14
	newLine = fontSize + 4
	c = canvas.Canvas("skrypty\\TestPDF.pdf",pagesize=portrait(A4),bottomup=0)
	c.setFont('Helvetica',fontSize, leading=None)
	for tmp in range(len(list)):
		if beggining >= 765:
			c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
			pageNumber += 1
			c.showPage()
			beggining = 50
			c.setFont('Helvetica',fontSize, leading=None)
		c.drawString(50,beggining,list[tmp])
		beggining += newLine
	c.drawCentredString(300,800,"- " + str(pageNumber) + " -")
	c.showPage()
	c.save()
	print "done"

def getName(string):
	length = len(string)
	tmp = ""
	for i in range(length-1,0,-1):
		if string[i] == "/":
			for j in range(i+1,length-4):
				tmp += string[j]
			break
	return tmp

def printTable(table,list):
	counter = 0
	left = 0
	right = 0
	tmp = ""
	while (counter < len(table) - 2):
		counter += 1
		if table[counter] == "(":
			left = counter
		if table[counter] == ")":
			right = counter
			for i in range(left + 1,right):
				tmp += table[i]
			list.append(tmp)
			tmp = ""

def printTableUserMaterial(table,list):
	for tmp in range(len(table)):
		list.append(str(table[tmp]))